package jet.shareplot.persistence.ic;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static jet.framework.util.JUnitAsserter.any;
import static jet.framework.util.JUnitAsserter.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.sql.ResultSet;

import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityRemote;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.shareplot.persistence.imut.ShareQuantityImut;
import jet.framework.util.pojo2.validator.ValidationException;

/**
 * ShareQuantity ImutConverter JUnit test class.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareQuantityIC_JUnitTest {

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromRemoteNullValidationError() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityRemote shareQuantityRemote = mock(ShareQuantityRemote.class);
        assert shareQuantityRemote != null;
        when(shareQuantityRemote.getIdShareQuantity()).thenReturn(null);
        when(shareQuantityRemote.getChangeFee()).thenReturn(null);
        when(shareQuantityRemote.getChangeQuantity()).thenReturn(null);
        when(shareQuantityRemote.getChangeType()).thenReturn(null);
        when(shareQuantityRemote.getChangeValue()).thenReturn(null);
        when(shareQuantityRemote.getIdPortfolio()).thenReturn(null);
        when(shareQuantityRemote.getIdShare()).thenReturn(null);
        when(shareQuantityRemote.getValueDate()).thenReturn(null);

        // act : run the test
        final ShareQuantityImut imut = ic.readImutFromRemote(shareQuantityRemote);

        // test that all data read from remote
        verify(shareQuantityRemote, times(1)).getIdShareQuantity();
        verify(shareQuantityRemote, times(1)).getChangeFee();
        verify(shareQuantityRemote, times(1)).getChangeQuantity();
        verify(shareQuantityRemote, times(1)).getChangeType();
        verify(shareQuantityRemote, times(1)).getChangeValue();
        verify(shareQuantityRemote, times(1)).getDescription();
        verify(shareQuantityRemote, times(1)).getIdPortfolio();
        verify(shareQuantityRemote, times(1)).getIdShare();
        verify(shareQuantityRemote, times(1)).getTotalQuantity();
        verify(shareQuantityRemote, times(1)).getValueDate();
    }

    @org.junit.Test
    public void testReadImutFromRemote() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityRemote shareQuantityRemote = mock(ShareQuantityRemote.class);
        assert shareQuantityRemote != null;
        when(shareQuantityRemote.getIdShareQuantity()).thenReturn(Long.valueOf(1));
        when(shareQuantityRemote.getChangeFee()).thenReturn(java.math.BigDecimal.valueOf(1));
        when(shareQuantityRemote.getChangeQuantity()).thenReturn(java.math.BigDecimal.valueOf(1));
        when(shareQuantityRemote.getChangeType()).thenReturn("changeType");
        when(shareQuantityRemote.getChangeValue()).thenReturn(java.math.BigDecimal.valueOf(1));
        when(shareQuantityRemote.getIdPortfolio()).thenReturn(Long.valueOf(1));
        when(shareQuantityRemote.getIdShare()).thenReturn(Long.valueOf(1));
        when(shareQuantityRemote.getValueDate()).thenReturn(new java.util.Date());

        // act : run the test
        final ShareQuantityImut imut = ic.readImutFromRemote(shareQuantityRemote);

        // test that all data read from remote
        verify(shareQuantityRemote, times(1)).getIdShareQuantity();
        verify(shareQuantityRemote, times(1)).getChangeFee();
        verify(shareQuantityRemote, times(1)).getChangeQuantity();
        verify(shareQuantityRemote, times(1)).getChangeType();
        verify(shareQuantityRemote, times(1)).getChangeValue();
        verify(shareQuantityRemote, times(1)).getDescription();
        verify(shareQuantityRemote, times(1)).getIdPortfolio();
        verify(shareQuantityRemote, times(1)).getIdShare();
        verify(shareQuantityRemote, times(1)).getTotalQuantity();
        verify(shareQuantityRemote, times(1)).getValueDate();
    }

    @org.junit.Test
    public void testWriteImutToRemote() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityRemote shareQuantityRemote = mock(ShareQuantityRemote.class);
        assert shareQuantityRemote != null;

        final Long idShareQuantity = Long.valueOf(1);
        final java.math.BigDecimal changeFee = java.math.BigDecimal.valueOf(1);
        final java.math.BigDecimal changeQuantity = java.math.BigDecimal.valueOf(1);
        final String changeType = "changeType";
        final java.math.BigDecimal changeValue = java.math.BigDecimal.valueOf(1);
        final String description = "description";
        final Long idPortfolio = Long.valueOf(1);
        final Long idShare = Long.valueOf(1);
        final java.math.BigDecimal totalQuantity = java.math.BigDecimal.valueOf(1);
        final jet.java.time.LocalDate valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(new java.util.Date());

        final ShareQuantityImut shareQuantityImut = new ShareQuantityImut(idShareQuantity, changeFee, changeQuantity, changeType, changeValue, description, idPortfolio, idShare, totalQuantity, valueDate);

        // act : run the test
        ic.writeImutToRemote(shareQuantityImut, shareQuantityRemote);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        verify(shareQuantityRemote, times(1)).setChangeFee(any(java.math.BigDecimal.class));
        verify(shareQuantityRemote, times(1)).setChangeQuantity(any(java.math.BigDecimal.class));
        verify(shareQuantityRemote, times(1)).setChangeType(any(String.class));
        verify(shareQuantityRemote, times(1)).setChangeValue(any(java.math.BigDecimal.class));
        verify(shareQuantityRemote, times(1)).setDescription(any(String.class));
        verify(shareQuantityRemote, times(1)).setIdPortfolio(any(Long.class));
        verify(shareQuantityRemote, times(1)).setIdShare(any(Long.class));
        verify(shareQuantityRemote, times(1)).setTotalQuantity(any(java.math.BigDecimal.class));
        verify(shareQuantityRemote, times(1)).setValueDate(any(java.util.Date.class));
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNullValidationError() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem();
        assert shareQuantityItem != null;

        // act : run the test
        final ShareQuantityImut imut = ic.readImutFromPojo(shareQuantityItem);

        // test that all data read from remote
        // nothing to do
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNewPojo() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem();
        assert shareQuantityItem != null;
        shareQuantityItem.setChangeFee(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setChangeQuantity(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setChangeType("changeType");
        shareQuantityItem.setChangeValue(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setDescription("description");
        shareQuantityItem.setIdPortfolio(Long.valueOf(1));
        shareQuantityItem.setIdShare(Long.valueOf(1));
        shareQuantityItem.setTotalQuantity(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setValueDate(new java.util.Date());

        // act : run the test
        final ShareQuantityImut imut = ic.readImutFromPojo(shareQuantityItem);

        // test that all data read from remote
        fail("Should have thrown an exception");
    }

    @org.junit.Test
    public void testReadImutFromPojo() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem();
        assert shareQuantityItem != null;
        shareQuantityItem.get_IdShareQuantity_Model().setNodeValue(Long.valueOf(1));
        shareQuantityItem.setChangeFee(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setChangeQuantity(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setChangeType("changeType");
        shareQuantityItem.setChangeValue(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setDescription("description");
        shareQuantityItem.setIdPortfolio(Long.valueOf(1));
        shareQuantityItem.setIdShare(Long.valueOf(1));
        shareQuantityItem.setTotalQuantity(java.math.BigDecimal.valueOf(1));
        shareQuantityItem.setValueDate(new java.util.Date());

        // act : run the test
        final ShareQuantityImut imut = ic.readImutFromPojo(shareQuantityItem);

        // test that all data read from remote
        assertEquals(java.math.BigDecimal.valueOf(1), imut.getChangeFee());
        assertEquals(java.math.BigDecimal.valueOf(1), imut.getChangeQuantity());
        assertEquals("changeType".substring(0, Math.min(1, "changeType".length())), imut.getChangeType());
        assertEquals(java.math.BigDecimal.valueOf(1), imut.getChangeValue());
        assertEquals("description".substring(0, Math.min(1000, "description".length())), imut.getDescription());
        assertEquals(Long.valueOf(1), imut.getIdPortfolio());
        assertEquals(Long.valueOf(1), imut.getIdShare());
        assertEquals(java.math.BigDecimal.valueOf(1), imut.getTotalQuantity());
        assertNotNull(imut.getValueDate());
    }

    @org.junit.Test
    public void testWriteImutToPojo() throws Exception {
        // arrange : set up the test
        final ShareQuantityIC ic = new ShareQuantityIC();

        final Long idShareQuantity = Long.valueOf(1);
        final java.math.BigDecimal changeFee = java.math.BigDecimal.valueOf(1);
        final java.math.BigDecimal changeQuantity = java.math.BigDecimal.valueOf(1);
        final String changeType = "changeType".substring(0, Math.min(1, "changeType".length()));
        final java.math.BigDecimal changeValue = java.math.BigDecimal.valueOf(1);
        final String description = "description".substring(0, Math.min(1000, "description".length()));
        final Long idPortfolio = Long.valueOf(1);
        final Long idShare = Long.valueOf(1);
        final java.math.BigDecimal totalQuantity = java.math.BigDecimal.valueOf(1);
        final jet.java.time.LocalDate valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(new java.util.Date());

        final ShareQuantityImut shareQuantityImut = new ShareQuantityImut(idShareQuantity, changeFee, changeQuantity, changeType, changeValue, description, idPortfolio, idShare, totalQuantity, valueDate);

        // act : run the test
        final ShareQuantityItem shareQuantityItem = ic.writeImutToPojo(shareQuantityImut);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        assertEquals(changeFee, shareQuantityItem.getChangeFee());
        assertEquals(changeQuantity, shareQuantityItem.getChangeQuantity());
        assertEquals(changeType, shareQuantityItem.getChangeType());
        assertEquals(changeValue, shareQuantityItem.getChangeValue());
        assertEquals(description, shareQuantityItem.getDescription());
        assertEquals(idPortfolio, shareQuantityItem.getIdPortfolio());
        assertEquals(idShare, shareQuantityItem.getIdShare());
        assertEquals(totalQuantity, shareQuantityItem.getTotalQuantity());
        assertEquals(jet.framework.util.pojo2.imut.ImutDateUtilities.newDate(valueDate), shareQuantityItem.getValueDate());
        // by definition pojo must be non new
        assertFalse(shareQuantityItem.isNew());
    }

    @org.junit.Test
    public void testReadImutFromResultSet() throws Exception {
        // arrange : set up the test
        final Long idShareQuantity = Long.valueOf(1);
        final java.math.BigDecimal changeFee = java.math.BigDecimal.valueOf(1);
        final java.math.BigDecimal changeQuantity = java.math.BigDecimal.valueOf(1);
        final String changeType = "changeType".substring(0, Math.min(1, "changeType".length()));
        final java.math.BigDecimal changeValue = java.math.BigDecimal.valueOf(1);
        final String description = "description".substring(0, Math.min(1000, "description".length()));
        final Long idPortfolio = Long.valueOf(1);
        final Long idShare = Long.valueOf(1);
        final java.math.BigDecimal totalQuantity = java.math.BigDecimal.valueOf(1);
        final java.util.Date valueDate = new java.util.Date();

        final ResultSet resultSet = mock(ResultSet.class);
        assert resultSet != null;
        when(resultSet.getLong("idShareQuantity")).thenReturn(idShareQuantity);
        when(resultSet.getBigDecimal("changeFee")).thenReturn(changeFee);
        when(resultSet.getBigDecimal("changeQuantity")).thenReturn(changeQuantity);
        when(resultSet.getString("changeType")).thenReturn(changeType);
        when(resultSet.getBigDecimal("changeValue")).thenReturn(changeValue);
        when(resultSet.getString("description")).thenReturn(description);
        when(resultSet.getLong("idPortfolio")).thenReturn(idPortfolio);
        when(resultSet.getLong("idShare")).thenReturn(idShare);
        when(resultSet.getBigDecimal("totalQuantity")).thenReturn(totalQuantity);
        when(resultSet.getDate("valueDate")).thenReturn(new java.sql.Date(valueDate.getTime()));

        // act : run the test
        final ShareQuantityIC ic = new ShareQuantityIC();
        final ShareQuantityImut imut = ic.readImutFromResultSet(resultSet);

        // test that all data read from remote
        assertEquals(idShareQuantity, imut.getIdShareQuantity());
        assertEquals(changeFee, imut.getChangeFee());
        assertEquals(changeQuantity, imut.getChangeQuantity());
        assertEquals(changeType, imut.getChangeType());
        assertEquals(changeValue, imut.getChangeValue());
        assertEquals(description, imut.getDescription());
        assertEquals(idPortfolio, imut.getIdPortfolio());
        assertEquals(idShare, imut.getIdShare());
        assertEquals(totalQuantity, imut.getTotalQuantity());
        assertEquals(jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(valueDate), imut.getValueDate());
    }

}
