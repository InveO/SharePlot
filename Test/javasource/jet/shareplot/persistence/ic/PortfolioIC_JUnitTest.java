package jet.shareplot.persistence.ic;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static jet.framework.util.JUnitAsserter.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.sql.ResultSet;

import jet.shareplot.persistence.ejb.portfolio.PortfolioRemote;
import jet.shareplot.persistence.pojo.PortfolioItem;
import jet.shareplot.persistence.imut.PortfolioImut;
import jet.framework.util.pojo2.validator.ValidationException;

/**
 * Portfolio ImutConverter JUnit test class.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class PortfolioIC_JUnitTest {

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromRemoteNullValidationError() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioRemote portfolioRemote = mock(PortfolioRemote.class);
        assert portfolioRemote != null;
        when(portfolioRemote.getIdPortfolio()).thenReturn(null);
        when(portfolioRemote.getIsFake()).thenReturn(null);
        when(portfolioRemote.getName()).thenReturn(null);

        // act : run the test
        final PortfolioImut imut = ic.readImutFromRemote(portfolioRemote);

        // test that all data read from remote
        verify(portfolioRemote, times(1)).getIdPortfolio();
        verify(portfolioRemote, times(1)).getIsFake();
        verify(portfolioRemote, times(1)).getName();
    }

    @org.junit.Test
    public void testReadImutFromRemote() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioRemote portfolioRemote = mock(PortfolioRemote.class);
        assert portfolioRemote != null;
        when(portfolioRemote.getIdPortfolio()).thenReturn(Long.valueOf(1));
        when(portfolioRemote.getIsFake()).thenReturn("isFake");
        when(portfolioRemote.getName()).thenReturn("name");

        // act : run the test
        final PortfolioImut imut = ic.readImutFromRemote(portfolioRemote);

        // test that all data read from remote
        verify(portfolioRemote, times(1)).getIdPortfolio();
        verify(portfolioRemote, times(1)).getIsFake();
        verify(portfolioRemote, times(1)).getName();
    }

    @org.junit.Test
    public void testWriteImutToRemote() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioRemote portfolioRemote = mock(PortfolioRemote.class);
        assert portfolioRemote != null;

        final Long idPortfolio = Long.valueOf(1);
        final String isFake = "isFake";
        final String name = "name";

        final PortfolioImut portfolioImut = new PortfolioImut(idPortfolio, isFake, name);

        // act : run the test
        ic.writeImutToRemote(portfolioImut, portfolioRemote);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        verify(portfolioRemote, times(1)).setIsFake(any(String.class));
        verify(portfolioRemote, times(1)).setName(any(String.class));
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNullValidationError() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioItem portfolioItem = new PortfolioItem();
        assert portfolioItem != null;

        // act : run the test
        final PortfolioImut imut = ic.readImutFromPojo(portfolioItem);

        // test that all data read from remote
        // nothing to do
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNewPojo() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioItem portfolioItem = new PortfolioItem();
        assert portfolioItem != null;
        portfolioItem.setIsFake("isFake");
        portfolioItem.setName("name");

        // act : run the test
        final PortfolioImut imut = ic.readImutFromPojo(portfolioItem);

        // test that all data read from remote
        fail("Should have thrown an exception");
    }

    @org.junit.Test
    public void testReadImutFromPojo() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioItem portfolioItem = new PortfolioItem();
        assert portfolioItem != null;
        portfolioItem.get_IdPortfolio_Model().setNodeValue(Long.valueOf(1));
        portfolioItem.setIsFake("isFake");
        portfolioItem.setName("name");

        // act : run the test
        final PortfolioImut imut = ic.readImutFromPojo(portfolioItem);

        // test that all data read from remote
        assertEquals("isFake".substring(0, Math.min(1, "isFake".length())), imut.getIsFake());
        assertEquals("name".substring(0, Math.min(45, "name".length())), imut.getName());
    }

    @org.junit.Test
    public void testWriteImutToPojo() throws Exception {
        // arrange : set up the test
        final PortfolioIC ic = new PortfolioIC();

        final Long idPortfolio = Long.valueOf(1);
        final String isFake = "isFake".substring(0, Math.min(1, "isFake".length()));
        final String name = "name".substring(0, Math.min(45, "name".length()));

        final PortfolioImut portfolioImut = new PortfolioImut(idPortfolio, isFake, name);

        // act : run the test
        final PortfolioItem portfolioItem = ic.writeImutToPojo(portfolioImut);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        assertEquals(isFake, portfolioItem.getIsFake());
        assertEquals(name, portfolioItem.getName());
        // by definition pojo must be non new
        assertFalse(portfolioItem.isNew());
    }

    @org.junit.Test
    public void testReadImutFromResultSet() throws Exception {
        // arrange : set up the test
        final Long idPortfolio = Long.valueOf(1);
        final String isFake = "isFake".substring(0, Math.min(1, "isFake".length()));
        final String name = "name".substring(0, Math.min(45, "name".length()));

        final ResultSet resultSet = mock(ResultSet.class);
        assert resultSet != null;
        when(resultSet.getLong("idPortfolio")).thenReturn(idPortfolio);
        when(resultSet.getString("isFake")).thenReturn(isFake);
        when(resultSet.getString("name")).thenReturn(name);

        // act : run the test
        final PortfolioIC ic = new PortfolioIC();
        final PortfolioImut imut = ic.readImutFromResultSet(resultSet);

        // test that all data read from remote
        assertEquals(idPortfolio, imut.getIdPortfolio());
        assertEquals(isFake, imut.getIsFake());
        assertEquals(name, imut.getName());
    }

}
