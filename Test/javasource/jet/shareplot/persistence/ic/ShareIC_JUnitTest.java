package jet.shareplot.persistence.ic;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static jet.framework.util.JUnitAsserter.any;
import static jet.framework.util.JUnitAsserter.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.sql.ResultSet;

import jet.shareplot.persistence.ejb.share.ShareRemote;
import jet.shareplot.persistence.pojo.ShareItem;
import jet.shareplot.persistence.imut.ShareImut;
import jet.framework.util.pojo2.validator.ValidationException;

/**
 * Share ImutConverter JUnit test class.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareIC_JUnitTest {

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromRemoteNullValidationError() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareRemote shareRemote = mock(ShareRemote.class);
        assert shareRemote != null;
        when(shareRemote.getIdShare()).thenReturn(null);
        when(shareRemote.getName()).thenReturn(null);

        // act : run the test
        final ShareImut imut = ic.readImutFromRemote(shareRemote);

        // test that all data read from remote
        verify(shareRemote, times(1)).getIdShare();
        verify(shareRemote, times(1)).getCodeISIN();
        verify(shareRemote, times(1)).getCodeYahoo();
        verify(shareRemote, times(1)).getDescription();
        verify(shareRemote, times(1)).getName();
    }

    @org.junit.Test
    public void testReadImutFromRemote() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareRemote shareRemote = mock(ShareRemote.class);
        assert shareRemote != null;
        when(shareRemote.getIdShare()).thenReturn(Long.valueOf(1));
        when(shareRemote.getName()).thenReturn("name");

        // act : run the test
        final ShareImut imut = ic.readImutFromRemote(shareRemote);

        // test that all data read from remote
        verify(shareRemote, times(1)).getIdShare();
        verify(shareRemote, times(1)).getCodeISIN();
        verify(shareRemote, times(1)).getCodeYahoo();
        verify(shareRemote, times(1)).getDescription();
        verify(shareRemote, times(1)).getName();
    }

    @org.junit.Test
    public void testWriteImutToRemote() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareRemote shareRemote = mock(ShareRemote.class);
        assert shareRemote != null;

        final Long idShare = Long.valueOf(1);
        final String codeISIN = "codeISIN";
        final String codeYahoo = "codeYahoo";
        final String description = "description";
        final String name = "name";

        final ShareImut shareImut = new ShareImut(idShare, codeISIN, codeYahoo, description, name);

        // act : run the test
        ic.writeImutToRemote(shareImut, shareRemote);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        verify(shareRemote, times(1)).setCodeISIN(any(String.class));
        verify(shareRemote, times(1)).setCodeYahoo(any(String.class));
        verify(shareRemote, times(1)).setDescription(any(String.class));
        verify(shareRemote, times(1)).setName(any(String.class));
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNullValidationError() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareItem shareItem = new ShareItem();
        assert shareItem != null;

        // act : run the test
        final ShareImut imut = ic.readImutFromPojo(shareItem);

        // test that all data read from remote
        // nothing to do
    }

    @org.junit.Test(expected = ValidationException.class)
    public void testReadImutFromPojoNewPojo() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareItem shareItem = new ShareItem();
        assert shareItem != null;
        shareItem.setCodeISIN("codeISIN");
        shareItem.setCodeYahoo("codeYahoo");
        shareItem.setDescription("description");
        shareItem.setName("name");

        // act : run the test
        final ShareImut imut = ic.readImutFromPojo(shareItem);

        // test that all data read from remote
        fail("Should have thrown an exception");
    }

    @org.junit.Test
    public void testReadImutFromPojo() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();
        final ShareItem shareItem = new ShareItem();
        assert shareItem != null;
        shareItem.get_IdShare_Model().setNodeValue(Long.valueOf(1));
        shareItem.setCodeISIN("codeISIN");
        shareItem.setCodeYahoo("codeYahoo");
        shareItem.setDescription("description");
        shareItem.setName("name");

        // act : run the test
        final ShareImut imut = ic.readImutFromPojo(shareItem);

        // test that all data read from remote
        assertEquals("codeISIN".substring(0, Math.min(45, "codeISIN".length())), imut.getCodeISIN());
        assertEquals("codeYahoo".substring(0, Math.min(45, "codeYahoo".length())), imut.getCodeYahoo());
        assertEquals("description".substring(0, Math.min(4000, "description".length())), imut.getDescription());
        assertEquals("name".substring(0, Math.min(255, "name".length())), imut.getName());
    }

    @org.junit.Test
    public void testWriteImutToPojo() throws Exception {
        // arrange : set up the test
        final ShareIC ic = new ShareIC();

        final Long idShare = Long.valueOf(1);
        final String codeISIN = "codeISIN".substring(0, Math.min(45, "codeISIN".length()));
        final String codeYahoo = "codeYahoo".substring(0, Math.min(45, "codeYahoo".length()));
        final String description = "description".substring(0, Math.min(4000, "description".length()));
        final String name = "name".substring(0, Math.min(255, "name".length()));

        final ShareImut shareImut = new ShareImut(idShare, codeISIN, codeYahoo, description, name);

        // act : run the test
        final ShareItem shareItem = ic.writeImutToPojo(shareImut);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        assertEquals(codeISIN, shareItem.getCodeISIN());
        assertEquals(codeYahoo, shareItem.getCodeYahoo());
        assertEquals(description, shareItem.getDescription());
        assertEquals(name, shareItem.getName());
        // by definition pojo must be non new
        assertFalse(shareItem.isNew());
    }

    @org.junit.Test
    public void testReadImutFromResultSet() throws Exception {
        // arrange : set up the test
        final Long idShare = Long.valueOf(1);
        final String codeISIN = "codeISIN".substring(0, Math.min(45, "codeISIN".length()));
        final String codeYahoo = "codeYahoo".substring(0, Math.min(45, "codeYahoo".length()));
        final String description = "description".substring(0, Math.min(4000, "description".length()));
        final String name = "name".substring(0, Math.min(255, "name".length()));

        final ResultSet resultSet = mock(ResultSet.class);
        assert resultSet != null;
        when(resultSet.getLong("idShare")).thenReturn(idShare);
        when(resultSet.getString("codeISIN")).thenReturn(codeISIN);
        when(resultSet.getString("codeYahoo")).thenReturn(codeYahoo);
        when(resultSet.getString("description")).thenReturn(description);
        when(resultSet.getString("name")).thenReturn(name);

        // act : run the test
        final ShareIC ic = new ShareIC();
        final ShareImut imut = ic.readImutFromResultSet(resultSet);

        // test that all data read from remote
        assertEquals(idShare, imut.getIdShare());
        assertEquals(codeISIN, imut.getCodeISIN());
        assertEquals(codeYahoo, imut.getCodeYahoo());
        assertEquals(description, imut.getDescription());
        assertEquals(name, imut.getName());
    }

}
