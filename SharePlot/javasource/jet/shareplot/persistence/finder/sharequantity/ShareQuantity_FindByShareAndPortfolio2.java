package jet.shareplot.persistence.finder.sharequantity;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.FinderException;
import javax.ejb.ObjectNotFoundException;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.framework.manager.datamodel.interfaces.DataSourceExecutor2;
import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.manager.datamodel.interfaces.ModelArray;
import jet.framework.nuts.select.FinderMethod;
import jet.framework.util.ejb.EJBModelList2;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.util.throwable.JETException;

import jet.shareplot.persistence.dse.ShareQuantityDSE;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityHome;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityRemote;
import jet.shareplot.persistence.ic.ShareQuantityIC;
import jet.shareplot.persistence.imut.ShareQuantityImut;

/**
 * Class for the findByShareAndPortfolio FinderMethod object for the ShareQuantity component.
 *
 * SQL Query : where idPortfolio = ? and idShare = ? order by valueDate asc
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareQuantity_FindByShareAndPortfolio2 implements FinderMethod<ShareQuantityImut> {

    private static final long serialVersionUID = 1612007130L;
    private DataSourceExecutor2<ShareQuantityHome, ShareQuantityRemote> dse;
    private @Nullable Long idPortfolio;
    private @Nullable Long idShare;

    /**
     * Set idPortfolio argument value.
     *
     * @param idPortfolio argument value
     */
    public void setIdPortfolio(final Long idPortfolio) {
        this.idPortfolio = idPortfolio;
    }

    /**
     * Set idShare argument value.
     *
     * @param idShare argument value
     */
    public void setIdShare(final Long idShare) {
        this.idShare = idShare;
    }


    @Override
    public @NonNull String getFinderName() {
        return "findByShareAndPortfolio";
    }

    @Override
    public @NonNull Map<String, Object> getArguments() {
        final Map<String, Object> args = new HashMap<String, Object>();
        args.put("idPortfolio", this.idPortfolio);
        args.put("idShare", this.idShare);
        return args;
    }

    @Override
    public @NonNull ModelArray callFinder() throws JETException, FinderObjectNotFoundException {
        Collection<@NonNull ShareQuantityRemote> list;
        DataModelConverter2<ShareQuantityRemote> dmc;
        try {
            final ShareQuantityHome sharequantity = getDataSourceExecutor2().getEJBHome();
            list = sharequantity.findByShareAndPortfolio(this.idPortfolio, this.idShare);

            dmc = getDataSourceExecutor2().getDataModelConverter();
        } catch (final RemoteException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ObjectNotFoundException e) {
            throw new FinderObjectNotFoundException(e.getMessage(), e);
        } catch (final FinderException e) {
            throw new JETException(e.getMessage(), e);
        }

        return new EJBModelList2<ShareQuantityRemote>(list, dmc);
    }

    private DataSourceExecutor2<ShareQuantityHome, ShareQuantityRemote> getDataSourceExecutor2() {
        DataSourceExecutor2<ShareQuantityHome, ShareQuantityRemote> result = this.dse;
        if (result == null) {
            result = this.dse = new ShareQuantityDSE();
        }
        return result;
    }

    @Override
    public @NonNull List<@NonNull ShareQuantityImut> callImutFinder() throws JETException, FinderObjectNotFoundException {
        final List<@NonNull ShareQuantityImut> result = new ArrayList<>();

        final ShareQuantityIC ic = new ShareQuantityIC();

        try {
            final ShareQuantityHome home = getDataSourceExecutor2().getEJBHome();
            final Collection<@NonNull ShareQuantityRemote> list = home.findByShareAndPortfolio(this.idPortfolio, this.idShare);

            for (final ShareQuantityRemote remote : list) {
                result.add(ic.readImutFromRemote(remote));
            }
        } catch (final RemoteException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ObjectNotFoundException e) {
            throw new FinderObjectNotFoundException(e.getMessage(), e);
        } catch (final FinderException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ValidationException e) {
            // should be impossible as only valid imuts should be written to the DB
            throw new JETException(e.getMessage(), e);
        }

        return result;
    }

}
