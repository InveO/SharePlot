package jet.shareplot.persistence.finder.sharevalue;

import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import javax.ejb.FinderException;
import javax.ejb.ObjectNotFoundException;

import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.framework.manager.datamodel.interfaces.DataSourceExecutor2;
import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.manager.datamodel.interfaces.ModelArray;
import jet.framework.nuts.select.FinderMethod;
import jet.framework.util.ejb.EJBModelList2;
import jet.shareplot.persistence.dse.ShareValueDSE;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueHome;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueRemote;
import jet.util.throwable.JETException;

/**
 * Class for the findByShareAndDate FinderMethod object for the ShareValue component.
 *
 * SQL Query : where idShare = ? and valueDate &lt;= ? order by valueDate desc limit 1
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareValue_FindByShareAndDate2 implements FinderMethod {

    private static final long serialVersionUID = 1303211696L;
    private DataSourceExecutor2<ShareValueHome, ShareValueRemote> dse;
    private @Nullable Long idShare;
    private java.util.@Nullable Date valueDate;

    /**
     * Set idShare argument value.
     *
     * @param idShare argument value
     */
    public void setIdShare(final Long idShare) {
        this.idShare = idShare;
    }

    /**
     * Set valueDate argument value.
     *
     * @param valueDate argument value
     */
    public void setValueDate(final java.util.Date valueDate) {
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            // this is a sql DATE field trim away time part
            final java.util.Calendar calendar = new java.util.GregorianCalendar();
            calendar.setTime(valueDate);
            calendar.set(java.util.Calendar.MILLISECOND, 0);
            calendar.set(java.util.Calendar.SECOND, 0);
            calendar.set(java.util.Calendar.MINUTE, 0);
            calendar.set(java.util.Calendar.HOUR_OF_DAY, 0);
            this.valueDate = calendar.getTime();
        }
    }


    @Override
    @NonNull
    public String getFinderName() {
        return "findByShareAndDate";
    }

    @Override
    @NonNull
    public Map<String, Object> getArguments() {
        final Map<String, Object> args = new HashMap<String, Object>();
        args.put("idShare", this.idShare);
        args.put("valueDate", this.valueDate);
        return args;
    }

    @Override
    @NonNull
    public ModelArray callFinder() throws JETException, FinderObjectNotFoundException {
        List<ShareValueRemote> list;
        DataModelConverter2<ShareValueRemote> dmc;
        try {
            final ShareValueHome sharevalue = getDataSourceExecutor2().getEJBHome();
            list = (List<ShareValueRemote>) sharevalue.findByShareAndDate(this.idShare, this.valueDate);

            dmc = getDataSourceExecutor2().getDataModelConverter();
        } catch (final RemoteException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ObjectNotFoundException e) {
            throw new FinderObjectNotFoundException(e.getMessage(), e);
        } catch (final FinderException e) {
            throw new JETException(e.getMessage(), e);
        }

        return new EJBModelList2<ShareValueRemote>(list, dmc);
    }

    private DataSourceExecutor2<ShareValueHome, ShareValueRemote> getDataSourceExecutor2() {
        DataSourceExecutor2<ShareValueHome, ShareValueRemote> result = this.dse;
        if (result == null) {
            result = this.dse = new ShareValueDSE();
        }
        return result;
    }
}
