package jet.shareplot.persistence.factory;

import java.io.Serializable;

import jet.framework.util.models.ModelHelper;
import jet.shareplot.persistence.pojo.PortfolioItem;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Simple pojo factory for the Portfolio Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class PortfolioFactory implements Serializable {

    private static final long serialVersionUID = 993423458L;
    private static Logger LOGGER;

    private PortfolioFactory() {
        // Singleton, add a private constructor to prevent instantiation
    }

    /**
     * Get a PortfolioItem initialized from a Model that has the same structure but contains
     * only String node values. These will be converted to the proper DataModel node value
     * types.
     *
     * @param untypedModel Model with String node values
     * @return PortfolioItem
     */
    public static PortfolioItem getFromUntypedModel(final Model untypedModel) {
        final PortfolioItem item = new PortfolioItem();

        String sValue = null;

        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "idPortfolio");
            if (sValue != null) {
                item.get_IdPortfolio_Model().setNodeValue(Long.valueOf(sValue));
            }
        } catch (final JETException e) {
            getLogger().logp(JETLevel.INFO, "PortfolioItem", "getFromUntypedModel", e.getMessage(), e);
        }
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "isFake");
            if (sValue == null) {
                sValue = "N";
            }
            item.setIsFake(sValue);
        } catch (final JETException e) {
            getLogger().logp(JETLevel.INFO, "PortfolioItem", "getFromUntypedModel", e.getMessage(), e);
        }
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "name");
            if (sValue == null) {
                sValue = " ";
            }
            item.setName(sValue);
        } catch (final JETException e) {
            getLogger().logp(JETLevel.INFO, "PortfolioItem", "getFromUntypedModel", e.getMessage(), e);
        }
        return item;
    }

    private static Logger getLogger() {
        if (LOGGER == null) {
            LOGGER = JETLoggerManager.getJETLoggerManager().getLogger("jet.shareplot.persistence.factory");
        }
        return LOGGER;
    }

}
