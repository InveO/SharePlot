package jet.shareplot.persistence.dse;

import java.rmi.RemoteException;
import java.util.concurrent.Callable;

import javax.annotation.Nonnull;
import javax.ejb.FinderException;
import javax.ejb.ObjectNotFoundException;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import jet.framework.manager.datamodel.interfaces.AbstractDataSourceExecutor2;
import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.JetConstants;
import jet.framework.util.jta.JETDuplicateKeyException;
import jet.shareplot.persistence.dmc.ShareQuantityDMC;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityHome;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityRemote;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * ShareQuantity DataSourceExecutor2.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareQuantityDSE extends AbstractDataSourceExecutor2<ShareQuantityHome, ShareQuantityRemote> {

    private static final long serialVersionUID = 1612007130L;
    private transient ShareQuantityHome ejbHome;
    private transient DataModelConverter2<ShareQuantityRemote> dataModelConverter;

    @Override
    public void updateFromDataModel(@Nonnull final Model dataModel) throws JETException, ObjectNotFoundException {
        final Callable<Object> callable = new Callable<Object>() {
            @Override
            public Object call() throws Exception {
                final ShareQuantityRemote ejbObject = getObjectFromStore(dataModel);
                getDataModelConverter().writeDataModelToObject(dataModel, ejbObject);
                return null;
            }
        };

        callUpdateTransaction(callable);

        // reset the dirty flag, record has just been written to the db, can not be dirty
        if (dataModel instanceof DataModelRootNode) {
            final DataModelRootNode dmrn = (DataModelRootNode) dataModel;
            dmrn.resetDirtyFlag();
        }
    }

    @Override
    public void createFromDataModel(@Nonnull final Model dataModel) throws JETException, JETDuplicateKeyException {
        final Callable<Object> callable = new Callable<Object>() {
            @Override
            public Object call() throws Exception {
                final ShareQuantityItem shareQuantityItem = new ShareQuantityItem(dataModel);

                final ShareQuantityHome shareQuantityHome = getEJBHome();
                final ShareQuantityRemote shareQuantityRemote = shareQuantityHome.create(shareQuantityItem.getIdShareQuantity(), shareQuantityItem.getChangeFee(), shareQuantityItem.getChangeQuantity(), shareQuantityItem.getChangeType(), shareQuantityItem.getChangeValue(), shareQuantityItem.getDescription(), shareQuantityItem.getIdPortfolio(), shareQuantityItem.getIdShare(), shareQuantityItem.getTotalQuantity(), shareQuantityItem.getValueDate());

                // has autoincrement PK, must update
                shareQuantityItem.get_IdShareQuantity_Model().setNodeValue(shareQuantityRemote.getIdShareQuantity());

                return null;
            }
        };

        callCreateTransaction(callable);

        // reset the dirty flag, record has just been written to the db, can not be dirty
        if (dataModel instanceof DataModelRootNode) {
            final DataModelRootNode dmrn = (DataModelRootNode) dataModel;
            dmrn.resetDirtyFlag();
        }
    }

    @Override
    public void removeFromDataModel(@Nonnull final Model dataModel) throws JETException, ObjectNotFoundException {
        final Callable<Object> callable = new Callable<Object>() {
            @Override
            public Object call() throws Exception {
                final ShareQuantityRemote shareQuantityRemote = getObjectFromStore(dataModel);
                shareQuantityRemote.remove();
                return null;
            }
        };

        callUpdateTransaction(callable);

        // set the dirty flag, record has just been deleted from the db, can only be dirty
        if (dataModel instanceof DataModelRootNode) {
            final DataModelRootNode dmrn = (DataModelRootNode) dataModel;
            dmrn.setDirtyFlag();
        }

        // if has autoincrement PK, must reset pk to null
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem(dataModel);
        shareQuantityItem.get_IdShareQuantity_Model().setNodeValue(null);
    }

    @Override
    @Nonnull
    public ShareQuantityHome getEJBHome() {
        ShareQuantityHome result = this.ejbHome;
        if (result == null) {
            try {
                result = this.ejbHome = (ShareQuantityHome) new InitialContext().lookup(JetConstants.EJB_CONTEXT + ShareQuantityHome.BEAN_NAME);
            } catch (final NamingException e) {
                throw new IllegalArgumentException("Unable to locate EJB Home : " + ShareQuantityHome.BEAN_NAME, e);
            }
            if (result == null) {
                throw new IllegalArgumentException("Unknown EJB : " + ShareQuantityHome.BEAN_NAME);
            }
        }
        return result;
    }

    @Override
    @Nonnull
    public DataModelConverter2<ShareQuantityRemote> getDataModelConverter() {
        DataModelConverter2<ShareQuantityRemote> result = this.dataModelConverter;
        if (result == null) {
            result = this.dataModelConverter = new ShareQuantityDMC();
        }

        return result;
    }

    /**
     * Get object from the persistent store corresponding to the data Model. Depending on the implementation
     * it may not be necessary to provide a full data Model.
     * <p>
     * This should be used with care as this may entail Transaction problems, depending on the underlying persistance layer.
     * </p>
     *
     * @param dataModel Model identifying the object to retrieve
     * @return E Persistent object corresponding to the Model
     * @throws JETException Thrown if there was an error whilst retrieving the object
     * @throws ObjectNotFoundException Thrown if there is no corresponding object
     */
    @Nonnull
    private ShareQuantityRemote getObjectFromStore(@Nonnull final Model dataModel) throws JETException, ObjectNotFoundException {
        assert dataModel != null : "Can not delete null model";

        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem(dataModel);
        final ShareQuantityHome shareQuantityHome = getEJBHome();

        ShareQuantityRemote shareQuantityRemote;
        try {
            // As it come from the database, it should not be possible that field(s) in the PK are null.
            shareQuantityRemote = shareQuantityHome.findByPrimaryKey(shareQuantityItem.getIdShareQuantity());
            assert shareQuantityRemote != null;
        } catch (final RemoteException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ObjectNotFoundException e) {
            throw e;
        } catch (final FinderException e) {
            throw new JETException(e.getMessage(), e);
        }

        return shareQuantityRemote;
    }
}
