package jet.shareplot.persistence.ejb.share;

import java.rmi.RemoteException;
import java.util.Collection;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;

/**
 * Class of the bean
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareBean implements EntityBean {
    
    /**
     * <code>serialVersionUID</code>
     */
    private static final long serialVersionUID = 1355887442L;

    transient private EntityContext entityContext = null;

    /**
     * <code>idShare</code>
     */
    public Long idShare = null;

    /**
     * <code>code</code>
     */
    public String code = null;

    /**
     * <code>description</code>
     */
    public String description = null;

    /**
     * <code>idPortfolio</code>
     */
    public Long idPortfolio = null;

    /**
     * <code>name</code>
     */
    public String name = null;


    /**
     * @return Long
     * @throws EJBException
     */
    public Long getIdShare() throws EJBException {
        return this.idShare;

    }
    /**
     * @param idShare
     * @throws EJBException
     */
    public void setIdShare(Long idShare) throws EJBException {
        this.idShare = idShare;
    }

    /**
     * @return String
     * @throws EJBException
     */
    public String getCode() throws EJBException {
        return this.code;

    }
    /**
     * @param code
     * @throws EJBException
     */
    public void setCode(String code) throws EJBException {
        this.code = code;
    }

    /**
     * @return String
     * @throws EJBException
     */
    public String getDescription() throws EJBException {
        return this.description;

    }
    /**
     * @param description
     * @throws EJBException
     */
    public void setDescription(String description) throws EJBException {
        this.description = description;
    }

    /**
     * @return Long
     * @throws EJBException
     */
    public Long getIdPortfolio() throws EJBException {
        return this.idPortfolio;

    }
    /**
     * @param idPortfolio
     * @throws EJBException
     */
    public void setIdPortfolio(Long idPortfolio) throws EJBException {
        this.idPortfolio = idPortfolio;
    }

    /**
     * @return String
     * @throws EJBException
     */
    public String getName() throws EJBException {
        return this.name;

    }
    /**
     * @param name
     * @throws EJBException
     */
    public void setName(String name) throws EJBException {
        this.name = name;
    }


    /**
     * @param idShare
     * @param code
     * @param description
     * @param idPortfolio
     * @param name
     * @return java.lang.Object
     * @throws CreateException
     */
    @SuppressWarnings({"hiding"})
    public java.lang.Object ejbCreate( Long idShare, String code, String description, Long idPortfolio, String name) throws CreateException {
        this.idShare = idShare;
        this.code = code;
        this.description = description;
        this.idPortfolio = idPortfolio;
        this.name = name;
        return null;
    }

    /**
     * @param idShare
     * @param code
     * @param description
     * @param idPortfolio
     * @param name
     * @throws CreateException
     */
    @SuppressWarnings({"hiding"})
    public void ejbPostCreate( Long idShare, String code, String description, Long idPortfolio, String name) throws CreateException {
        assert this.entityContext != null : "this.entityContext can not be null";
        
        jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) this.entityContext.getPrimaryKey();
        Number _number = (Number) _pk.getAutoGeneratedPrimaryKey();
        this.idShare = Long.valueOf(_number.longValue());
    }

    /**
     * @param pkField
     * @return java.lang.Object
     * @throws FinderException
     */
    public java.lang.Object ejbFindByPrimaryKey(java.lang.Object pkField) throws FinderException {
        if (pkField instanceof jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) {
            jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) pkField;
            this.idShare = (Long) _pk.getAutoGeneratedPrimaryKey();
        }
        return pkField;
    }

    /**
     * @param code
     * @param description
     * @param idPortfolio
     * @param name
     * @throws EJBException
     */
    @SuppressWarnings({"hiding"})
    public void update( String code, String description, Long idPortfolio, String name) throws EJBException {
        // in the case of a m-n table this method may be empty, as pk fields can not be updated
        this.code = code;
        this.description = description;
        this.idPortfolio = idPortfolio;
        this.name = name;
    }

    /**
     * @return Collection
     * @throws FinderException
     */
     @SuppressWarnings({"hiding"})
    public Collection<ShareRemote> ejbFindAll() throws FinderException {
        return null;
    }
    
    /**
     * @param idPortfolio
     * @return Collection
     * @throws FinderException
     */
     @SuppressWarnings({"hiding"})
    public Collection<ShareRemote> ejbFindByPortfolio(Long idPortfolio) throws FinderException {
        return null;
    }
    
    /**
     * @param sqlWhereClause
     * @param sqlArguments
     * @return Collection
     * @throws FinderException
     */
     @SuppressWarnings({"hiding"})
    public Collection<ShareRemote> ejbFindByPreparedSQLQuery(String sqlWhereClause,Object[] sqlArguments) throws FinderException {
        return null;
    }
    

    @Override
    @SuppressWarnings("unused")
    public void ejbActivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbLoad() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbPassivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbRemove() throws RemoteException, RemoveException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbStore() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void setEntityContext(EntityContext context) throws RemoteException {
        this.entityContext = context;
    }

    @Override
    @SuppressWarnings("unused")
    public void unsetEntityContext() throws RemoteException {
        this.entityContext = null;
    }

}