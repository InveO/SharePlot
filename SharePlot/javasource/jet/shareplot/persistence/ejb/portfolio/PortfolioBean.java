package jet.shareplot.persistence.ejb.portfolio;

import java.rmi.RemoteException;
import java.util.Collection;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;

/**
 * Class of the bean.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class PortfolioBean implements EntityBean {

    /**
     * <code>serialVersionUID</code>.
     */
    private static final long serialVersionUID = 993423458L;

    private transient EntityContext entityContext;

    // fields must remain public as it is part of the EJB specifications
    /**
     * Field idPortfolio of type Long, database type INTEGER of length 10.
     */
    public Long idPortfolio;
    /**
     * Field isFake of type String, database type CHAR of length 1.
     */
    public String isFake;
    /**
     * Field name of type String, database type VARCHAR of length 45.
     */
    public String name;

    /**
     * Get the value for the field idPortfolio.
     *
     * @return Long value for the field idPortfolio
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public Long getIdPortfolio() throws EJBException {
        return this.idPortfolio;

    }
    /**
     * Set the value for the field idPortfolio.
     *
     * @param idPortfolio value for the field idPortfolio
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setIdPortfolio(@Nullable final Long idPortfolio) throws EJBException {
        this.idPortfolio = idPortfolio;
    }

    /**
     * Get the value for the field isFake.
     *
     * @return String value for the field isFake
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public String getIsFake() throws EJBException {
        return this.isFake;

    }
    /**
     * Set the value for the field isFake.
     *
     * @param isFake value for the field isFake
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setIsFake(@Nullable final String isFake) throws EJBException {
        this.isFake = isFake;
    }

    /**
     * Get the value for the field name.
     *
     * @return String value for the field name
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public String getName() throws EJBException {
        return this.name;

    }
    /**
     * Set the value for the field name.
     *
     * @param name value for the field name
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setName(@Nullable final String name) throws EJBException {
        this.name = name;
    }


    /**
     * ejbCreate method.
     *
     * @param idPortfolio value for the field idPortfolio
     * @param isFake value for the field isFake
     * @param name value for the field name
     * @return java.lang.Object bean primary key
     * @throws CreateException Thrown by the method to indicate a failure during the creation.
     */
    @SuppressWarnings("hiding")
    @Nullable
    public java.lang.Object ejbCreate(final Long idPortfolio, final String isFake, final String name) throws CreateException {
        this.idPortfolio = idPortfolio;
        this.isFake = isFake;
        this.name = name;
        return null;
    }

    /**
     * ejbPostCreate method.
     *
     * @param idPortfolio value for the field idPortfolio
     * @param isFake value for the field isFake
     * @param name value for the field name
     * @throws CreateException Thrown by the method to indicate a failure during the creation.
     */
    @SuppressWarnings("hiding")
    public void ejbPostCreate(final Long idPortfolio, final String isFake, final String name) throws CreateException {
        assert this.entityContext != null : "this.entityContext can not be null";

        jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) this.entityContext.getPrimaryKey();
        Number _number = (Number) _pk.getAutoGeneratedPrimaryKey();
        this.idPortfolio = Long.valueOf(_number.longValue());
    }

    /**
     * Find a record by its primary key.
     *
     * @param pkField primary key
     * @return java.lang.Object primary key object
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    @Nonnull
    public java.lang.Object ejbFindByPrimaryKey(@Nonnull final java.lang.Object pkField) throws FinderException {
        if (pkField instanceof jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) {
            jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) pkField;
            this.idPortfolio = (Long) _pk.getAutoGeneratedPrimaryKey();
        }
        return pkField;
    }

    /**
     * Update record.
     *
     * @param isFake value for the field isFake
     * @param name value for the field name
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @SuppressWarnings("hiding")
    public void update(final String isFake, final String name) throws EJBException {
        // in the case of a m-n table this method may be empty, as pk fields can not be updated
        this.isFake = isFake;
        this.name = name;
    }

    /**
     * Finder method.
     *
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    public Collection<PortfolioRemote> ejbFindAll() throws FinderException {
        return null;
    }

    /**
     * Finder method.
     *
     * @param sqlWhereClause String value for finder argument sqlWhereClause
     * @param sqlArguments Object[] value for finder argument sqlArguments
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    public Collection<PortfolioRemote> ejbFindByPreparedSQLQuery(final String sqlWhereClause, final Object[] sqlArguments) throws FinderException {
        return null;
    }


    @Override
    @SuppressWarnings("unused")
    public void ejbActivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbLoad() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbPassivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbRemove() throws RemoteException, RemoveException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbStore() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void setEntityContext(@Nullable final EntityContext context) throws RemoteException {
        this.entityContext = context;
    }

    @Override
    @SuppressWarnings("unused")
    public void unsetEntityContext() throws RemoteException {
        this.entityContext = null;
    }
}
