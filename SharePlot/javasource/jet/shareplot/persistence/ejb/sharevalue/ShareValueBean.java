package jet.shareplot.persistence.ejb.sharevalue;

import java.rmi.RemoteException;
import java.util.Collection;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;

/**
 * Class of the bean.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareValueBean implements EntityBean {

    /**
     * <code>serialVersionUID</code>.
     */
    private static final long serialVersionUID = 1303211696L;

    private transient EntityContext entityContext;

    // fields must remain public as it is part of the EJB specifications
    /**
     * Field idShareValue of type Long, database type INTEGER of length 10.
     */
    public Long idShareValue;
    /**
     * Field idShare of type Long, database type INTEGER of length 10.
     */
    public Long idShare;
    /**
     * Field value of type java.math.BigDecimal, database type DECIMAL of length 10.
     */
    public java.math.BigDecimal value;
    /**
     * Field valueDate of type java.util.Date, database type DATE of length 10.
     */
    public java.util.Date valueDate;

    /**
     * Get the value for the field idShareValue.
     *
     * @return Long value for the field idShareValue
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public Long getIdShareValue() throws EJBException {
        return this.idShareValue;

    }
    /**
     * Set the value for the field idShareValue.
     *
     * @param idShareValue value for the field idShareValue
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setIdShareValue(@Nullable final Long idShareValue) throws EJBException {
        this.idShareValue = idShareValue;
    }

    /**
     * Get the value for the field idShare.
     *
     * @return Long value for the field idShare
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public Long getIdShare() throws EJBException {
        return this.idShare;

    }
    /**
     * Set the value for the field idShare.
     *
     * @param idShare value for the field idShare
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setIdShare(@Nullable final Long idShare) throws EJBException {
        this.idShare = idShare;
    }

    /**
     * Get the value for the field value.
     *
     * @return java.math.BigDecimal value for the field value
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public java.math.BigDecimal getValue() throws EJBException {
        return this.value;

    }
    /**
     * Set the value for the field value.
     *
     * @param value value for the field value
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setValue(@Nullable final java.math.BigDecimal value) throws EJBException {
        this.value = value;
    }

    /**
     * Get the value for the field valueDate.
     *
     * @return java.util.Date value for the field valueDate
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @Nullable
    public java.util.Date getValueDate() throws EJBException {
        java.util.Date date = null;
        if (this.valueDate != null) {
            date = (java.util.Date) this.valueDate.clone();
        }
        return date;

    }
    /**
     * Set the value for the field valueDate.
     *
     * @param valueDate value for the field valueDate
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    public void setValueDate(@Nullable final java.util.Date valueDate) throws EJBException {
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
    }


    /**
     * ejbCreate method.
     *
     * @param idShareValue value for the field idShareValue
     * @param idShare value for the field idShare
     * @param value value for the field value
     * @param valueDate value for the field valueDate
     * @return java.lang.Object bean primary key
     * @throws CreateException Thrown by the method to indicate a failure during the creation.
     */
    @SuppressWarnings("hiding")
    @Nullable
    public java.lang.Object ejbCreate(final Long idShareValue, final Long idShare, final java.math.BigDecimal value, final java.util.Date valueDate) throws CreateException {
        this.idShareValue = idShareValue;
        this.idShare = idShare;
        this.value = value;
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
        return null;
    }

    /**
     * ejbPostCreate method.
     *
     * @param idShareValue value for the field idShareValue
     * @param idShare value for the field idShare
     * @param value value for the field value
     * @param valueDate value for the field valueDate
     * @throws CreateException Thrown by the method to indicate a failure during the creation.
     */
    @SuppressWarnings("hiding")
    public void ejbPostCreate(final Long idShareValue, final Long idShare, final java.math.BigDecimal value, final java.util.Date valueDate) throws CreateException {
        assert this.entityContext != null : "this.entityContext can not be null";

        jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) this.entityContext.getPrimaryKey();
        Number _number = (Number) _pk.getAutoGeneratedPrimaryKey();
        this.idShareValue = Long.valueOf(_number.longValue());
    }

    /**
     * Find a record by its primary key.
     *
     * @param pkField primary key
     * @return java.lang.Object primary key object
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    @Nonnull
    public java.lang.Object ejbFindByPrimaryKey(@Nonnull final java.lang.Object pkField) throws FinderException {
        if (pkField instanceof jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) {
            jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) pkField;
            this.idShareValue = (Long) _pk.getAutoGeneratedPrimaryKey();
        }
        return pkField;
    }

    /**
     * Update record.
     *
     * @param idShare value for the field idShare
     * @param value value for the field value
     * @param valueDate value for the field valueDate
     * @throws EJBException Thrown by the method to indicate a failure caused by a system-level error.
     */
    @SuppressWarnings("hiding")
    public void update(final Long idShare, final java.math.BigDecimal value, final java.util.Date valueDate) throws EJBException {
        // in the case of a m-n table this method may be empty, as pk fields can not be updated
        this.idShare = idShare;
        this.value = value;
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
    }

    /**
     * Finder method.
     *
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    public Collection<ShareValueRemote> ejbFindAll() throws FinderException {
        return null;
    }

    /**
     * Finder method.
     *
     * @param idShare Long value for finder argument idShare
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    @SuppressWarnings("hiding")
    public Collection<ShareValueRemote> ejbFindByShare(final Long idShare) throws FinderException {
        return null;
    }

    /**
     * Finder method.
     *
     * @param idShare Long value for finder argument idShare
     * @param valueDate java.util.Date value for finder argument valueDate
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    @SuppressWarnings("hiding")
    public Collection<ShareValueRemote> ejbFindByShareAndDate(final Long idShare, final java.util.Date valueDate) throws FinderException {
        return null;
    }

    /**
     * Finder method.
     *
     * @param sqlWhereClause String value for finder argument sqlWhereClause
     * @param sqlArguments Object[] value for finder argument sqlArguments
     * @return Collection of records
     * @throws FinderException The exception is used as a standard application-level exception to report a failure to find the requested EJB object(s).
     */
    public Collection<ShareValueRemote> ejbFindByPreparedSQLQuery(final String sqlWhereClause, final Object[] sqlArguments) throws FinderException {
        return null;
    }


    @Override
    @SuppressWarnings("unused")
    public void ejbActivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbLoad() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbPassivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbRemove() throws RemoteException, RemoveException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbStore() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void setEntityContext(@Nullable final EntityContext context) throws RemoteException {
        this.entityContext = context;
    }

    @Override
    @SuppressWarnings("unused")
    public void unsetEntityContext() throws RemoteException {
        this.entityContext = null;
    }
}
