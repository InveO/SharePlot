package jet.shareplot.persistence.ejb.sharevalue;

import java.rmi.RemoteException;
import java.util.Collection;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.EntityBean;
import javax.ejb.EntityContext;
import javax.ejb.FinderException;
import javax.ejb.RemoveException;

/**
 * Class of the bean
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareValueBean implements EntityBean {
    
    /**
     * <code>serialVersionUID</code>
     */
    private static final long serialVersionUID = 1461049825L;

    transient private EntityContext entityContext = null;

    /**
     * <code>idShareValue</code>
     */
    public Long idShareValue = null;

    /**
     * <code>isShare</code>
     */
    public Long isShare = null;

    /**
     * <code>valueDate</code>
     */
    public java.util.Date valueDate = null;

    /**
     * <code>value</code>
     */
    public java.math.BigDecimal value = null;


    /**
     * @return Long
     * @throws EJBException
     */
    public Long getIdShareValue() throws EJBException {
        return this.idShareValue;

    }
    /**
     * @param idShareValue
     * @throws EJBException
     */
    public void setIdShareValue(Long idShareValue) throws EJBException {
        this.idShareValue = idShareValue;
    }

    /**
     * @return Long
     * @throws EJBException
     */
    public Long getIsShare() throws EJBException {
        return this.isShare;

    }
    /**
     * @param isShare
     * @throws EJBException
     */
    public void setIsShare(Long isShare) throws EJBException {
        this.isShare = isShare;
    }

    /**
     * @return java.util.Date
     * @throws EJBException
     */
    public java.util.Date getValueDate() throws EJBException {
        java.util.Date date = null;
        if (this.valueDate != null) {
            date = (java.util.Date) this.valueDate.clone();
        }
        return date;

    }
    /**
     * @param valueDate
     * @throws EJBException
     */
    public void setValueDate(java.util.Date valueDate) throws EJBException {
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
    }

    /**
     * @return java.math.BigDecimal
     * @throws EJBException
     */
    public java.math.BigDecimal getValue() throws EJBException {
        return this.value;

    }
    /**
     * @param value
     * @throws EJBException
     */
    public void setValue(java.math.BigDecimal value) throws EJBException {
        this.value = value;
    }


    /**
     * @param idShareValue
     * @param isShare
     * @param valueDate
     * @param value
     * @return java.lang.Object
     * @throws CreateException
     */
    @SuppressWarnings({"hiding"})
    public java.lang.Object ejbCreate( Long idShareValue, Long isShare, java.util.Date valueDate, java.math.BigDecimal value) throws CreateException {
        this.idShareValue = idShareValue;
        this.isShare = isShare;
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
        this.value = value;
        return null;
    }

    /**
     * @param idShareValue
     * @param isShare
     * @param valueDate
     * @param value
     * @throws CreateException
     */
    @SuppressWarnings({"hiding"})
    public void ejbPostCreate( Long idShareValue, Long isShare, java.util.Date valueDate, java.math.BigDecimal value) throws CreateException {
        assert this.entityContext != null : "this.entityContext can not be null";
        
        jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) this.entityContext.getPrimaryKey();
        Number _number = (Number) _pk.getAutoGeneratedPrimaryKey();
        this.idShareValue = Long.valueOf(_number.longValue());
    }

    /**
     * @param pkField
     * @return java.lang.Object
     * @throws FinderException
     */
    public java.lang.Object ejbFindByPrimaryKey(java.lang.Object pkField) throws FinderException {
        if (pkField instanceof jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) {
            jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey _pk = (jet.container.managers.jdbc.interfaces.AutoGeneratedPrimaryKey) pkField;
            this.idShareValue = (Long) _pk.getAutoGeneratedPrimaryKey();
        }
        return pkField;
    }

    /**
     * @param isShare
     * @param valueDate
     * @param value
     * @throws EJBException
     */
    @SuppressWarnings({"hiding"})
    public void update( Long isShare, java.util.Date valueDate, java.math.BigDecimal value) throws EJBException {
        // in the case of a m-n table this method may be empty, as pk fields can not be updated
        this.isShare = isShare;
        if (valueDate == null) {
            this.valueDate = null;
        } else {
            this.valueDate = (java.util.Date) valueDate.clone();
        }
        this.value = value;
    }

    /**
     * @return Collection
     * @throws FinderException
     */
     @SuppressWarnings({"hiding"})
    public Collection<ShareValueRemote> ejbFindAll() throws FinderException {
        return null;
    }
    
    /**
     * @param sqlWhereClause
     * @param sqlArguments
     * @return Collection
     * @throws FinderException
     */
     @SuppressWarnings({"hiding"})
    public Collection<ShareValueRemote> ejbFindByPreparedSQLQuery(String sqlWhereClause,Object[] sqlArguments) throws FinderException {
        return null;
    }
    

    @Override
    @SuppressWarnings("unused")
    public void ejbActivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbLoad() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbPassivate() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbRemove() throws RemoteException, RemoveException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void ejbStore() throws RemoteException {
        // do nothing
    }

    @Override
    @SuppressWarnings("unused")
    public void setEntityContext(EntityContext context) throws RemoteException {
        this.entityContext = context;
    }

    @Override
    @SuppressWarnings("unused")
    public void unsetEntityContext() throws RemoteException {
        this.entityContext = null;
    }

}