package jet.shareplot.persistence.imut;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.shareplot.persistence.imutval.ShareValueImutVal;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.util.annotations.AnnotationsHelper;

/**
 * Immutable object for the ShareValue Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class ShareValueImut implements Serializable {

    private static final long serialVersionUID = 1303211696L;

    private final Long idShareValue;
    private final Long idShare;
    private final java.math.BigDecimal value;
    private final jet.java.time.LocalDate valueDate;

    /**
     * Constructor.
     *
     * @param idShareValue idShareValue value, if <code>null</code> will throw a ValidationException
     * @param idShare idShare value, if <code>null</code> will throw a ValidationException
     * @param value value value, if <code>null</code> will throw a ValidationException
     * @param valueDate valueDate value, if <code>null</code> will throw a ValidationException
     * @throws ValidationException if failed to validate
     */
    public ShareValueImut(final @Nullable Long idShareValue, final @Nullable Long idShare, final java.math.@Nullable BigDecimal value, final jet.java.time.@Nullable LocalDate valueDate) throws ValidationException {
        this.idShareValue = idShareValue;
        this.idShare = idShare;
        this.value = value;
        this.valueDate = valueDate;

        checkNonNullIsNull(this);
        final ShareValueImutVal validator = new ShareValueImutVal();
        validator.validate(this);
    }

    /**
     * Check if a non nullable field contains a <code>null</code> value. If this is the case a ValidationException will be thrown
     * indicating all the fields the break their nullity constraints.
     *
     * @param imut ShareValueImut
     * @throws ValidationException if a field break its nullity constraints
     */
    public static final void checkNonNullIsNull(@NonNull final ShareValueImut imut) throws ValidationException {
        final List<ValidationIssue> issues = new ArrayList<>();
        if (imut.idShareValue == null) {
            final ValidationIssue issue = new ValidationIssue("idShareValue", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.idShare == null) {
            final ValidationIssue issue = new ValidationIssue("idShare", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.value == null) {
            final ValidationIssue issue = new ValidationIssue("value", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.valueDate == null) {
            final ValidationIssue issue = new ValidationIssue("valueDate", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (issues.size() > 0) {
            throw new ValidationException("Null non nullable field(s).", issues);
        }
    }

    /**
     * Get value of field idShareValue.
     *
     * @return @NonNull Long value of the field idShareValue
     */
    public final @NonNull Long getIdShareValue() {
        return AnnotationsHelper.assertNonNull(this.idShareValue);
    }

    /**
     * Get value of field idShare.
     *
     * @return @NonNull Long value of the field idShare
     */
    public final @NonNull Long getIdShare() {
        return AnnotationsHelper.assertNonNull(this.idShare);
    }

    /**
     * Get value of field value.
     *
     * @return java.math.@NonNull BigDecimal value of the field value
     */
    public final java.math.@NonNull BigDecimal getValue() {
        return AnnotationsHelper.assertNonNull(this.value);
    }

    /**
     * Get value of field valueDate.
     *
     * @return jet.java.time.@NonNull LocalDate value of the field valueDate
     */
    public final jet.java.time.@NonNull LocalDate getValueDate() {
        return AnnotationsHelper.assertNonNull(this.valueDate);
    }

}
