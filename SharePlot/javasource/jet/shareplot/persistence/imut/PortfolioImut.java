package jet.shareplot.persistence.imut;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.shareplot.persistence.imutval.PortfolioImutVal;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.util.annotations.AnnotationsHelper;

/**
 * Immutable object for the Portfolio Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class PortfolioImut implements Serializable {

    private static final long serialVersionUID = 993423458L;

    private final Long idPortfolio;
    private final String isFake;
    private final String name;

    /**
     * Constructor.
     *
     * @param idPortfolio idPortfolio value, if <code>null</code> will throw a ValidationException
     * @param isFake isFake value, if <code>null</code> will throw a ValidationException
     * @param name name value, if <code>null</code> will throw a ValidationException
     * @throws ValidationException if failed to validate
     */
    public PortfolioImut(final @Nullable Long idPortfolio, final @Nullable String isFake, final @Nullable String name) throws ValidationException {
        this.idPortfolio = idPortfolio;
        this.isFake = isFake;
        this.name = name;

        checkNonNullIsNull(this);
        final PortfolioImutVal validator = new PortfolioImutVal();
        validator.validate(this);
    }

    /**
     * Check if a non nullable field contains a <code>null</code> value. If this is the case a ValidationException will be thrown
     * indicating all the fields the break their nullity constraints.
     *
     * @param imut PortfolioImut
     * @throws ValidationException if a field break its nullity constraints
     */
    public static final void checkNonNullIsNull(final @NonNull PortfolioImut imut) throws ValidationException {
        final List<ValidationIssue> issues = new ArrayList<>();
        if (imut.idPortfolio == null) {
            final ValidationIssue issue = new ValidationIssue("idPortfolio", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.isFake == null) {
            final ValidationIssue issue = new ValidationIssue("isFake", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.name == null) {
            final ValidationIssue issue = new ValidationIssue("name", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (issues.size() > 0) {
            throw new ValidationException("Null non nullable field(s).", issues);
        }
    }

    /**
     * Get value of field idPortfolio.
     *
     * @return @NonNull Long value of the field idPortfolio
     */
    public final @NonNull Long getIdPortfolio() {
        return AnnotationsHelper.assertNonNull(this.idPortfolio);
    }

    /**
     * Get value of field isFake.
     *
     * @return @NonNull String value of the field isFake
     */
    public final @NonNull String getIsFake() {
        return AnnotationsHelper.assertNonNull(this.isFake);
    }

    /**
     * Get value of field name.
     *
     * @return @NonNull String value of the field name
     */
    public final @NonNull String getName() {
        return AnnotationsHelper.assertNonNull(this.name);
    }

}
