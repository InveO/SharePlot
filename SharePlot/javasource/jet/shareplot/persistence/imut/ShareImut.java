package jet.shareplot.persistence.imut;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.shareplot.persistence.imutval.ShareImutVal;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.util.annotations.AnnotationsHelper;

/**
 * Immutable object for the Share Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class ShareImut implements Serializable {

    private static final long serialVersionUID = -1939421298L;

    private final Long idShare;
    private final String codeISIN;
    private final String codeYahoo;
    private final String description;
    private final String name;

    /**
     * Constructor.
     *
     * @param idShare idShare value, if <code>null</code> will throw a ValidationException
     * @param codeISIN codeISIN value, may be <code>null</code>
     * @param codeYahoo codeYahoo value, may be <code>null</code>
     * @param description description value, may be <code>null</code>
     * @param name name value, if <code>null</code> will throw a ValidationException
     * @throws ValidationException if failed to validate
     */
    public ShareImut(final @Nullable Long idShare, final @Nullable String codeISIN, final @Nullable String codeYahoo, final @Nullable String description, final @Nullable String name) throws ValidationException {
        this.idShare = idShare;
        this.codeISIN = codeISIN;
        this.codeYahoo = codeYahoo;
        this.description = description;
        this.name = name;

        checkNonNullIsNull(this);
        final ShareImutVal validator = new ShareImutVal();
        validator.validate(this);
    }

    /**
     * Check if a non nullable field contains a <code>null</code> value. If this is the case a ValidationException will be thrown
     * indicating all the fields the break their nullity constraints.
     *
     * @param imut ShareImut
     * @throws ValidationException if a field break its nullity constraints
     */
    public static final void checkNonNullIsNull(@NonNull final ShareImut imut) throws ValidationException {
        final List<ValidationIssue> issues = new ArrayList<>();
        if (imut.idShare == null) {
            final ValidationIssue issue = new ValidationIssue("idShare", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.name == null) {
            final ValidationIssue issue = new ValidationIssue("name", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (issues.size() > 0) {
            throw new ValidationException("Null non nullable field(s).", issues);
        }
    }

    /**
     * Get value of field idShare.
     *
     * @return @NonNull Long value of the field idShare
     */
    public final @NonNull Long getIdShare() {
        return AnnotationsHelper.assertNonNull(this.idShare);
    }

    /**
     * Get value of field codeISIN.
     *
     * @return @Nullable String value of the field codeISIN
     */
    public final @Nullable String getCodeISIN() {
        return this.codeISIN;
    }

    /**
     * Get value of field codeYahoo.
     *
     * @return @Nullable String value of the field codeYahoo
     */
    public final @Nullable String getCodeYahoo() {
        return this.codeYahoo;
    }

    /**
     * Get value of field description.
     *
     * @return @Nullable String value of the field description
     */
    public final @Nullable String getDescription() {
        return this.description;
    }

    /**
     * Get value of field name.
     *
     * @return @NonNull String value of the field name
     */
    public final @NonNull String getName() {
        return AnnotationsHelper.assertNonNull(this.name);
    }

}
