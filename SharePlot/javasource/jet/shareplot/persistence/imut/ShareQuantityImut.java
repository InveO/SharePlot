package jet.shareplot.persistence.imut;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.shareplot.persistence.imutval.ShareQuantityImutVal;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.util.annotations.AnnotationsHelper;

/**
 * Immutable object for the ShareQuantity Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class ShareQuantityImut implements Serializable {

    private static final long serialVersionUID = 1612007130L;

    private final Long idShareQuantity;
    private final java.math.BigDecimal changeFee;
    private final java.math.BigDecimal changeQuantity;
    private final String changeType;
    private final java.math.BigDecimal changeValue;
    private final String description;
    private final Long idPortfolio;
    private final Long idShare;
    private final java.math.BigDecimal totalQuantity;
    private final jet.java.time.LocalDate valueDate;

    /**
     * Constructor.
     *
     * @param idShareQuantity idShareQuantity value, if <code>null</code> will throw a ValidationException
     * @param changeFee changeFee value, if <code>null</code> will throw a ValidationException
     * @param changeQuantity changeQuantity value, if <code>null</code> will throw a ValidationException
     * @param changeType changeType value, if <code>null</code> will throw a ValidationException
     * @param changeValue changeValue value, if <code>null</code> will throw a ValidationException
     * @param description description value, may be <code>null</code>
     * @param idPortfolio idPortfolio value, if <code>null</code> will throw a ValidationException
     * @param idShare idShare value, if <code>null</code> will throw a ValidationException
     * @param totalQuantity totalQuantity value, may be <code>null</code>
     * @param valueDate valueDate value, if <code>null</code> will throw a ValidationException
     * @throws ValidationException if failed to validate
     */
    public ShareQuantityImut(final @Nullable Long idShareQuantity, final java.math.@Nullable BigDecimal changeFee, final java.math.@Nullable BigDecimal changeQuantity, final @Nullable String changeType, final java.math.@Nullable BigDecimal changeValue, final @Nullable String description, final @Nullable Long idPortfolio, final @Nullable Long idShare, final java.math.@Nullable BigDecimal totalQuantity, final jet.java.time.@Nullable LocalDate valueDate) throws ValidationException {
        this.idShareQuantity = idShareQuantity;
        this.changeFee = changeFee;
        this.changeQuantity = changeQuantity;
        this.changeType = changeType;
        this.changeValue = changeValue;
        this.description = description;
        this.idPortfolio = idPortfolio;
        this.idShare = idShare;
        this.totalQuantity = totalQuantity;
        this.valueDate = valueDate;

        checkNonNullIsNull(this);
        final ShareQuantityImutVal validator = new ShareQuantityImutVal();
        validator.validate(this);
    }

    /**
     * Check if a non nullable field contains a <code>null</code> value. If this is the case a ValidationException will be thrown
     * indicating all the fields the break their nullity constraints.
     *
     * @param imut ShareQuantityImut
     * @throws ValidationException if a field break its nullity constraints
     */
    public static final void checkNonNullIsNull(@NonNull final ShareQuantityImut imut) throws ValidationException {
        final List<ValidationIssue> issues = new ArrayList<>();
        if (imut.idShareQuantity == null) {
            final ValidationIssue issue = new ValidationIssue("idShareQuantity", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.changeFee == null) {
            final ValidationIssue issue = new ValidationIssue("changeFee", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.changeQuantity == null) {
            final ValidationIssue issue = new ValidationIssue("changeQuantity", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.changeType == null) {
            final ValidationIssue issue = new ValidationIssue("changeType", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.changeValue == null) {
            final ValidationIssue issue = new ValidationIssue("changeValue", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.idPortfolio == null) {
            final ValidationIssue issue = new ValidationIssue("idPortfolio", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.idShare == null) {
            final ValidationIssue issue = new ValidationIssue("idShare", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.valueDate == null) {
            final ValidationIssue issue = new ValidationIssue("valueDate", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (issues.size() > 0) {
            throw new ValidationException("Null non nullable field(s).", issues);
        }
    }

    /**
     * Get value of field idShareQuantity.
     *
     * @return @NonNull Long value of the field idShareQuantity
     */
    public final @NonNull Long getIdShareQuantity() {
        return AnnotationsHelper.assertNonNull(this.idShareQuantity);
    }

    /**
     * Get value of field changeFee.
     *
     * @return java.math.@NonNull BigDecimal value of the field changeFee
     */
    public final java.math.@NonNull BigDecimal getChangeFee() {
        return AnnotationsHelper.assertNonNull(this.changeFee);
    }

    /**
     * Get value of field changeQuantity.
     *
     * @return java.math.@NonNull BigDecimal value of the field changeQuantity
     */
    public final java.math.@NonNull BigDecimal getChangeQuantity() {
        return AnnotationsHelper.assertNonNull(this.changeQuantity);
    }

    /**
     * Get value of field changeType.
     *
     * @return @NonNull String value of the field changeType
     */
    public final @NonNull String getChangeType() {
        return AnnotationsHelper.assertNonNull(this.changeType);
    }

    /**
     * Get value of field changeValue.
     *
     * @return java.math.@NonNull BigDecimal value of the field changeValue
     */
    public final java.math.@NonNull BigDecimal getChangeValue() {
        return AnnotationsHelper.assertNonNull(this.changeValue);
    }

    /**
     * Get value of field description.
     *
     * @return @Nullable String value of the field description
     */
    public final @Nullable String getDescription() {
        return this.description;
    }

    /**
     * Get value of field idPortfolio.
     *
     * @return @NonNull Long value of the field idPortfolio
     */
    public final @NonNull Long getIdPortfolio() {
        return AnnotationsHelper.assertNonNull(this.idPortfolio);
    }

    /**
     * Get value of field idShare.
     *
     * @return @NonNull Long value of the field idShare
     */
    public final @NonNull Long getIdShare() {
        return AnnotationsHelper.assertNonNull(this.idShare);
    }

    /**
     * Get value of field totalQuantity.
     *
     * @return java.math.@Nullable BigDecimal value of the field totalQuantity
     */
    public final java.math.@Nullable BigDecimal getTotalQuantity() {
        return this.totalQuantity;
    }

    /**
     * Get value of field valueDate.
     *
     * @return jet.java.time.@NonNull LocalDate value of the field valueDate
     */
    public final jet.java.time.@NonNull LocalDate getValueDate() {
        return AnnotationsHelper.assertNonNull(this.valueDate);
    }

}
