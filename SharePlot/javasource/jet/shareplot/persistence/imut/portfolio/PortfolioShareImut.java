package jet.shareplot.persistence.imut.portfolio;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.shareplot.persistence.imutval.portfolio.PortfolioShareImutVal;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.util.annotations.AnnotationsHelper;

/**
 * Immutable object for the PortfolioShare Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public final class PortfolioShareImut implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long idPortfolio;
    private final Long idShare;
    private final java.math.BigDecimal changeQuantity;
    private final String portfolioName;
    private final String shareName;
    private final java.math.BigDecimal totalQuantity;
    private final java.math.BigDecimal value;
    private final jet.java.time.LocalDate valueDate;

    /**
     * Constructor.
     *
     * @param idPortfolio idPortfolio value, if <code>null</code> will throw a ValidationException
     * @param idShare idShare value, if <code>null</code> will throw a ValidationException
     * @param changeQuantity changeQuantity value, if <code>null</code> will throw a ValidationException
     * @param portfolioName portfolioName value, if <code>null</code> will throw a ValidationException
     * @param shareName shareName value, if <code>null</code> will throw a ValidationException
     * @param totalQuantity totalQuantity value, if <code>null</code> will throw a ValidationException
     * @param value value value, if <code>null</code> will throw a ValidationException
     * @param valueDate valueDate value, if <code>null</code> will throw a ValidationException
     * @throws ValidationException if failed to validate
     */
    public PortfolioShareImut(final @Nullable Long idPortfolio, final @Nullable Long idShare, final java.math.@Nullable BigDecimal changeQuantity, final @Nullable String portfolioName, final @Nullable String shareName, final java.math.@Nullable BigDecimal totalQuantity, final java.math.@Nullable BigDecimal value, final jet.java.time.@Nullable LocalDate valueDate) throws ValidationException {
        this.idPortfolio = idPortfolio;
        this.idShare = idShare;
        this.changeQuantity = changeQuantity;
        this.portfolioName = portfolioName;
        this.shareName = shareName;
        this.totalQuantity = totalQuantity;
        this.value = value;
        this.valueDate = valueDate;

        checkNonNullIsNull(this);
        final PortfolioShareImutVal validator = new PortfolioShareImutVal();
        validator.validate(this);
    }

    /**
     * Check if a non nullable field contains a <code>null</code> value. If this is the case a ValidationException will be thrown
     * indicating all the fields the break their nullity constraints.
     *
     * @param imut PortfolioShareImut
     * @throws ValidationException if a field break its nullity constraints
     */
    public static final void checkNonNullIsNull(@NonNull final PortfolioShareImut imut) throws ValidationException {
        final List<ValidationIssue> issues = new ArrayList<>();
        if (imut.idPortfolio == null) {
            final ValidationIssue issue = new ValidationIssue("idPortfolio", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.idShare == null) {
            final ValidationIssue issue = new ValidationIssue("idShare", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.changeQuantity == null) {
            final ValidationIssue issue = new ValidationIssue("changeQuantity", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.portfolioName == null) {
            final ValidationIssue issue = new ValidationIssue("portfolioName", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.shareName == null) {
            final ValidationIssue issue = new ValidationIssue("shareName", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.totalQuantity == null) {
            final ValidationIssue issue = new ValidationIssue("totalQuantity", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.value == null) {
            final ValidationIssue issue = new ValidationIssue("value", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (imut.valueDate == null) {
            final ValidationIssue issue = new ValidationIssue("valueDate", ValidationIssue.TYPE_NON_NULL_IS_NULL, null);
            issues.add(issue);
        }
        if (issues.size() > 0) {
            throw new ValidationException("Null non nullable field(s).", issues);
        }
    }

    /**
     * Get value of field idPortfolio.
     *
     * @return @NonNull Long value of the field idPortfolio
     */
    public final @NonNull Long getIdPortfolio() {
        return AnnotationsHelper.assertNonNull(this.idPortfolio);
    }

    /**
     * Get value of field idShare.
     *
     * @return @NonNull Long value of the field idShare
     */
    public final @NonNull Long getIdShare() {
        return AnnotationsHelper.assertNonNull(this.idShare);
    }

    /**
     * Get value of field changeQuantity.
     *
     * @return java.math.@NonNull BigDecimal value of the field changeQuantity
     */
    public final java.math.@NonNull BigDecimal getChangeQuantity() {
        return AnnotationsHelper.assertNonNull(this.changeQuantity);
    }

    /**
     * Get value of field portfolioName.
     *
     * @return @NonNull String value of the field portfolioName
     */
    public final @NonNull String getPortfolioName() {
        return AnnotationsHelper.assertNonNull(this.portfolioName);
    }

    /**
     * Get value of field shareName.
     *
     * @return @NonNull String value of the field shareName
     */
    public final @NonNull String getShareName() {
        return AnnotationsHelper.assertNonNull(this.shareName);
    }

    /**
     * Get value of field totalQuantity.
     *
     * @return java.math.@NonNull BigDecimal value of the field totalQuantity
     */
    public final java.math.@NonNull BigDecimal getTotalQuantity() {
        return AnnotationsHelper.assertNonNull(this.totalQuantity);
    }

    /**
     * Get value of field value.
     *
     * @return java.math.@NonNull BigDecimal value of the field value
     */
    public final java.math.@NonNull BigDecimal getValue() {
        return AnnotationsHelper.assertNonNull(this.value);
    }

    /**
     * Get value of field valueDate.
     *
     * @return jet.java.time.@NonNull LocalDate value of the field valueDate
     */
    public final jet.java.time.@NonNull LocalDate getValueDate() {
        return AnnotationsHelper.assertNonNull(this.valueDate);
    }

}
