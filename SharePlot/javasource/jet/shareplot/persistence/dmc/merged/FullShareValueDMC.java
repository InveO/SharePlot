package jet.shareplot.persistence.dmc.merged;

import java.rmi.RemoteException;

import javax.ejb.EJBException;
import javax.ejb.FinderException;
import javax.ejb.ObjectNotFoundException;

import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.shareplot.persistence.dse.merged.FullShareValueDSE;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueRemote;
import jet.shareplot.persistence.ejb.share.ShareHome;
import jet.shareplot.persistence.ejb.share.ShareRemote;
import jet.shareplot.persistence.pojo.merged.FullShareValueItem;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * FullShareValue DataModelConverter2
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class FullShareValueDMC implements DataModelConverter2<ShareValueRemote> {

    private static final long serialVersionUID = 1303211696L;
    private final FullShareValueDSE fullShareValueDSE;

    /**
     * Constructor
     *
     * @param fullShareValueDSE
     */
    public FullShareValueDMC(final FullShareValueDSE fullShareValueDSE) {
        this.fullShareValueDSE = fullShareValueDSE;
    }

    @Override
    public Model readDataModelFromObject(final ShareValueRemote shareValueRemote) throws JETException {
        final FullShareValueItem item = new FullShareValueItem();

        // read data from primary object
        try {
            item.get_IdShareValue_Model().setNodeValue(shareValueRemote.getIdShareValue());
            item.get_IdShare_Model().setNodeValue(shareValueRemote.getIdShare());
            item.get_Value_Model().setNodeValue(shareValueRemote.getValue());
            item.get_ValueDate_Model().setNodeValue(shareValueRemote.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareValueRemote.", e);
        }

        // read data from secondary object
        try {
            final ShareRemote shareRemote = getSecondaryObjectFromStore(item);
            if (shareRemote != null) {
                item.setIdShare(shareRemote.getIdShare());
                item.setCodeISIN(shareRemote.getCodeISIN());
                item.setCodeYahoo(shareRemote.getCodeYahoo());
                item.setDescription(shareRemote.getDescription());
                item.setIdPortfolio(shareRemote.getIdPortfolio());
                item.setName(shareRemote.getName());
            }
        } catch (final ObjectNotFoundException e) {
            throw new JETException("ObjectNotFoundException while reading from ShareRemote.", e);
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareRemote.", e);
        }

        return item.get_Model();
    }

    @Override
    public void writeDataModelToObject(final Model dataModel, final ShareValueRemote shareValueRemote) throws JETException {
        final FullShareValueItem item = new FullShareValueItem(dataModel);

        // update primary record
        try {
            // do not update pk fields
            shareValueRemote.setIdShare(item.getIdShare());
            shareValueRemote.setValue(item.getValue());
            shareValueRemote.setValueDate(item.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareValueRemote.", e);
        }

        // update secondary record
        try {
            final ShareRemote shareRemote = getSecondaryObjectFromStore(item);
            // do not update pk fields
            shareRemote.setCodeISIN(item.getCodeISIN());
            shareRemote.setCodeYahoo(item.getCodeYahoo());
            shareRemote.setDescription(item.getDescription());
            shareRemote.setIdPortfolio(item.getIdPortfolio());
            shareRemote.setName(item.getName());
        } catch (final ObjectNotFoundException e) {
            throw new JETException("ObjectNotFoundException while writing to ShareRemote.", e);
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareRemote.", e);
        }
    }

    private ShareRemote getSecondaryObjectFromStore(final FullShareValueItem item) throws JETException, ObjectNotFoundException {
        final ShareHome home = this.fullShareValueDSE.getSecondaryEJBHome();

        ShareRemote remote;
        try {
            remote = home.findByPrimaryKey(item.getIdShareValue());
        } catch (final RemoteException e) {
            throw new JETException(e.getMessage(), e);
        } catch (final ObjectNotFoundException e) {
            throw e;
        } catch (final FinderException e) {
            throw new JETException(e.getMessage(), e);
        }
        return remote;
    }

}
