package jet.shareplot.persistence.dmc;

import java.rmi.RemoteException;

import javax.annotation.Nonnull;
import javax.ejb.EJBException;

import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueRemote;
import jet.shareplot.persistence.pojo.ShareValueItem;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * ShareValue DataModelConverter2.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareValueDMC implements DataModelConverter2<ShareValueRemote> {

    private static final long serialVersionUID = 1303211696L;

    /**
     * Default constructor.
     * Nothing to do at the moment.
     */
    public ShareValueDMC() {
        super();
    }

    @Override
    @Nonnull
    public final Model readDataModelFromObject(@Nonnull final ShareValueRemote shareValueRemote) throws JETException {
        final ShareValueItem shareValueItem = new ShareValueItem();

        try {
            shareValueItem.get_IdShareValue_Model().setNodeValue(shareValueRemote.getIdShareValue());
            shareValueItem.get_IdShare_Model().setNodeValue(shareValueRemote.getIdShare());
            shareValueItem.get_Value_Model().setNodeValue(shareValueRemote.getValue());
            shareValueItem.get_ValueDate_Model().setNodeValue(shareValueRemote.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareValueRemote.", e);
        }

        // reset the dirty flag, record has just been read from db, can not be dirty
        if (shareValueItem.get_Model() instanceof DataModelRootNode) {
            final DataModelRootNode dmrn = (DataModelRootNode) shareValueItem.get_Model();
            dmrn.resetDirtyFlag();
        }

        return shareValueItem.get_Model();
    }

    @Override
    public final void writeDataModelToObject(@Nonnull final Model dataModel, @Nonnull final ShareValueRemote shareValueRemote) throws JETException {
        final ShareValueItem shareValueItem = new ShareValueItem(dataModel);

        try {
            // do not update pk fields
            shareValueRemote.setIdShare(shareValueItem.getIdShare());
            shareValueRemote.setValue(shareValueItem.getValue());
            shareValueRemote.setValueDate(shareValueItem.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareValueRemote.", e);
        }
    }

}
