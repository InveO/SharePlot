package jet.shareplot.persistence.dmc;

import java.rmi.RemoteException;

import javax.ejb.EJBException;

import jet.framework.manager.datamodel.interfaces.DataModelConverter2;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityRemote;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * ShareQuantity DataModelConverter2
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareQuantityDMC implements DataModelConverter2<ShareQuantityRemote> {

    private static final long serialVersionUID = 1077646545L;

    @Override
    public Model readDataModelFromObject(final ShareQuantityRemote shareQuantityRemote) throws JETException {
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem();

        try {
            shareQuantityItem.get_IdShareQuantity_Model().setNodeValue(shareQuantityRemote.getIdShareQuantity());
            shareQuantityItem.get_ChangeFee_Model().setNodeValue(shareQuantityRemote.getChangeFee());
            shareQuantityItem.get_ChangeQuantity_Model().setNodeValue(shareQuantityRemote.getChangeQuantity());
            shareQuantityItem.get_ChangeType_Model().setNodeValue(shareQuantityRemote.getChangeType());
            shareQuantityItem.get_ChangeValue_Model().setNodeValue(shareQuantityRemote.getChangeValue());
            shareQuantityItem.get_Description_Model().setNodeValue(shareQuantityRemote.getDescription());
            shareQuantityItem.get_IdShare_Model().setNodeValue(shareQuantityRemote.getIdShare());
            shareQuantityItem.get_ValueDate_Model().setNodeValue(shareQuantityRemote.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareQuantityRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareQuantityRemote.", e);
        }

        return shareQuantityItem.get_Model();
    }

    @Override
    public void writeDataModelToObject(final Model dataModel, final ShareQuantityRemote shareQuantityRemote) throws JETException {
        final ShareQuantityItem shareQuantityItem = new ShareQuantityItem(dataModel);

        try {
            // do not update pk fields
            shareQuantityRemote.setChangeFee(shareQuantityItem.getChangeFee());
            shareQuantityRemote.setChangeQuantity(shareQuantityItem.getChangeQuantity());
            shareQuantityRemote.setChangeType(shareQuantityItem.getChangeType());
            shareQuantityRemote.setChangeValue(shareQuantityItem.getChangeValue());
            shareQuantityRemote.setDescription(shareQuantityItem.getDescription());
            shareQuantityRemote.setIdShare(shareQuantityItem.getIdShare());
            shareQuantityRemote.setValueDate(shareQuantityItem.getValueDate());
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareQuantityRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareQuantityRemote.", e);
        }
    }

}
