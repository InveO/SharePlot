package jet.shareplot.persistence.ic;

import java.rmi.RemoteException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import javax.ejb.EJBException;

import jet.framework.manager.datamodel.interfaces.ImutConverter;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.shareplot.persistence.ejb.sharequantity.ShareQuantityRemote;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.shareplot.persistence.imut.ShareQuantityImut;
import jet.util.throwable.JETException;

/**
 * ShareQuantity ImutConverter.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareQuantityIC implements ImutConverter<ShareQuantityRemote, ShareQuantityImut, ShareQuantityItem> {

    private static final long serialVersionUID = 1612007130L;

    /**
     * Default constructor.
     * Nothing to do at the moment.
     */
    public ShareQuantityIC() {
        super();
    }

    @Override
    public @NonNull ShareQuantityImut readImutFromRemote(final @NonNull ShareQuantityRemote remote) throws JETException, ValidationException {
        ShareQuantityImut shareQuantityImut = null;

        try {
            final Long idShareQuantity = remote.getIdShareQuantity();
            final java.math.BigDecimal changeFee = remote.getChangeFee();
            final java.math.BigDecimal changeQuantity = remote.getChangeQuantity();
            final String changeType = remote.getChangeType();
            final java.math.BigDecimal changeValue = remote.getChangeValue();
            final String description = remote.getDescription();
            final Long idPortfolio = remote.getIdPortfolio();
            final Long idShare = remote.getIdShare();
            final java.math.BigDecimal totalQuantity = remote.getTotalQuantity();
            final jet.java.time.LocalDate valueDate;
            final java.util.Date valueDate_TMP = remote.getValueDate();
            if (valueDate_TMP == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(valueDate_TMP);
            }

            shareQuantityImut = new ShareQuantityImut(idShareQuantity, changeFee, changeQuantity, changeType, changeValue, description, idPortfolio, idShare, totalQuantity, valueDate);

        } catch (final ValidationException e) {
            throw e;
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareQuantityRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareQuantityRemote.", e);
        }

        return shareQuantityImut;
    }

    @Override
    public void writeImutToRemote(final @NonNull ShareQuantityImut imut, final @NonNull ShareQuantityRemote remote) throws JETException {
        try {
            // do not update pk fields
            remote.setChangeFee(imut.getChangeFee());
            remote.setChangeQuantity(imut.getChangeQuantity());
            remote.setChangeType(imut.getChangeType());
            remote.setChangeValue(imut.getChangeValue());
            remote.setDescription(imut.getDescription());
            remote.setIdPortfolio(imut.getIdPortfolio());
            remote.setIdShare(imut.getIdShare());
            remote.setTotalQuantity(imut.getTotalQuantity());
            remote.setValueDate(jet.framework.util.pojo2.imut.ImutDateUtilities.newDate(imut.getValueDate()));
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareQuantityRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareQuantityRemote.", e);
        }
    }

    @Override
    public @NonNull ShareQuantityImut readImutFromPojo(final @NonNull ShareQuantityItem item) throws ValidationException {
        ShareQuantityImut shareQuantityImut = null;

        if (item.isNew()) {
            final List<ValidationIssue> validationIssues = new ArrayList<>();
            validationIssues.add(new ValidationIssue("ALL_FIELDS", ValidationIssue.TYPE_NEW_POJO, null));
            throw new ValidationException("Can not create immutable object from new pojo.", validationIssues);
        }

        try {
            final Long idShareQuantity = item.getIdShareQuantity();
            final java.math.BigDecimal changeFee = item.getChangeFee();
            final java.math.BigDecimal changeQuantity = item.getChangeQuantity();
            final String changeType = item.getChangeType();
            final java.math.BigDecimal changeValue = item.getChangeValue();
            final String description = item.getDescription();
            final Long idPortfolio = item.getIdPortfolio();
            final Long idShare = item.getIdShare();
            final java.math.BigDecimal totalQuantity = item.getTotalQuantity();
            final jet.java.time.LocalDate valueDate;
            final java.util.Date valueDate_TMP = item.getValueDate();
            if (valueDate_TMP == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(valueDate_TMP);
            }

            shareQuantityImut = new ShareQuantityImut(idShareQuantity, changeFee, changeQuantity, changeType, changeValue, description, idPortfolio, idShare, totalQuantity, valueDate);

        } catch (final ValidationException e) {
            throw e;
        }

        return shareQuantityImut;
    }

    @Override
    public @NonNull ShareQuantityItem writeImutToPojo(final @NonNull ShareQuantityImut imut) {
        ShareQuantityItem item = new ShareQuantityItem();
        item.get_IdShareQuantity_Model().setNodeValue(imut.getIdShareQuantity());
        item.setChangeFee(imut.getChangeFee());
        item.setChangeQuantity(imut.getChangeQuantity());
        item.setChangeType(imut.getChangeType());
        item.setChangeValue(imut.getChangeValue());
        item.setDescription(imut.getDescription());
        item.setIdPortfolio(imut.getIdPortfolio());
        item.setIdShare(imut.getIdShare());
        item.setTotalQuantity(imut.getTotalQuantity());
        item.setValueDate(jet.framework.util.pojo2.imut.ImutDateUtilities.newDate(imut.getValueDate()));
        return item;
    }

    @Override
    public @NonNull ShareQuantityImut readImutFromResultSet(final @NonNull ResultSet resultSet) throws ValidationException, JETException {
        ShareQuantityImut shareQuantityImut = null;

        try {
            final Long idShareQuantity = Long.valueOf(resultSet.getLong("idShareQuantity"));
            final java.math.BigDecimal changeFee = resultSet.getBigDecimal("changeFee");
            final java.math.BigDecimal changeQuantity = resultSet.getBigDecimal("changeQuantity");
            final String changeType = resultSet.getString("changeType");
            final java.math.BigDecimal changeValue = resultSet.getBigDecimal("changeValue");
            final String description = resultSet.getString("description");
            final Long idPortfolio = Long.valueOf(resultSet.getLong("idPortfolio"));
            final Long idShare = Long.valueOf(resultSet.getLong("idShare"));
            final java.math.BigDecimal totalQuantity = resultSet.getBigDecimal("totalQuantity");
            final java.sql.Date sqlValueDate = resultSet.getDate("valueDate");
            final jet.java.time.LocalDate valueDate;
            if (sqlValueDate == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(sqlValueDate);
            }

            shareQuantityImut = new ShareQuantityImut(idShareQuantity, changeFee, changeQuantity, changeType, changeValue, description, idPortfolio, idShare, totalQuantity, valueDate);

        } catch (final ValidationException e) {
            throw e;
        } catch (final SQLException e) {
            throw new JETException("SQLException while reading from ResultSet.", e);
        }

        return shareQuantityImut;
    }

}
