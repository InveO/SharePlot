package jet.shareplot.persistence.ic;

import java.rmi.RemoteException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import javax.ejb.EJBException;

import jet.framework.manager.datamodel.interfaces.ImutConverter;
import jet.framework.util.pojo2.validator.ValidationException;
import jet.framework.util.pojo2.validator.ValidationIssue;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueRemote;
import jet.shareplot.persistence.pojo.ShareValueItem;
import jet.shareplot.persistence.imut.ShareValueImut;
import jet.util.throwable.JETException;

/**
 * ShareValue ImutConverter.
 *
 * Generated by JetTools, do not edit this file directly.
 */
public final class ShareValueIC implements ImutConverter<ShareValueRemote, ShareValueImut, ShareValueItem> {

    private static final long serialVersionUID = 1303211696L;

    /**
     * Default constructor.
     * Nothing to do at the moment.
     */
    public ShareValueIC() {
        super();
    }

    @Override
    public @NonNull ShareValueImut readImutFromRemote(final @NonNull ShareValueRemote remote) throws JETException, ValidationException {
        ShareValueImut shareValueImut = null;

        try {
            final Long idShareValue = remote.getIdShareValue();
            final Long idShare = remote.getIdShare();
            final java.math.BigDecimal value = remote.getValue();
            final jet.java.time.LocalDate valueDate;
            final java.util.Date valueDate_TMP = remote.getValueDate();
            if (valueDate_TMP == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(valueDate_TMP);
            }

            shareValueImut = new ShareValueImut(idShareValue, idShare, value, valueDate);

        } catch (final ValidationException e) {
            throw e;
        } catch (final EJBException e) {
            throw new JETException("EJBException while reading from ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while reading from ShareValueRemote.", e);
        }

        return shareValueImut;
    }

    @Override
    public void writeImutToRemote(final @NonNull ShareValueImut imut, final @NonNull ShareValueRemote remote) throws JETException {
        try {
            // do not update pk fields
            remote.setIdShare(imut.getIdShare());
            remote.setValue(imut.getValue());
            remote.setValueDate(jet.framework.util.pojo2.imut.ImutDateUtilities.newDate(imut.getValueDate()));
        } catch (final EJBException e) {
            throw new JETException("EJBException while writing to ShareValueRemote.", e);
        } catch (final RemoteException e) {
            throw new JETException("RemoteException while writing to ShareValueRemote.", e);
        }
    }

    @Override
    public @NonNull ShareValueImut readImutFromPojo(final @NonNull ShareValueItem item) throws ValidationException {
        ShareValueImut shareValueImut = null;

        if (item.isNew()) {
            final List<ValidationIssue> validationIssues = new ArrayList<>();
            validationIssues.add(new ValidationIssue("ALL_FIELDS", ValidationIssue.TYPE_NEW_POJO, null));
            throw new ValidationException("Can not create immutable object from new pojo.", validationIssues);
        }

        try {
            final Long idShareValue = item.getIdShareValue();
            final Long idShare = item.getIdShare();
            final java.math.BigDecimal value = item.getValue();
            final jet.java.time.LocalDate valueDate;
            final java.util.Date valueDate_TMP = item.getValueDate();
            if (valueDate_TMP == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(valueDate_TMP);
            }

            shareValueImut = new ShareValueImut(idShareValue, idShare, value, valueDate);

        } catch (final ValidationException e) {
            throw e;
        }

        return shareValueImut;
    }

    @Override
    public @NonNull ShareValueItem writeImutToPojo(final @NonNull ShareValueImut imut) {
        ShareValueItem item = new ShareValueItem();
        item.get_IdShareValue_Model().setNodeValue(imut.getIdShareValue());
        item.setIdShare(imut.getIdShare());
        item.setValue(imut.getValue());
        item.setValueDate(jet.framework.util.pojo2.imut.ImutDateUtilities.newDate(imut.getValueDate()));
        return item;
    }

    @Override
    public @NonNull ShareValueImut readImutFromResultSet(final @NonNull ResultSet resultSet) throws ValidationException, JETException {
        ShareValueImut shareValueImut = null;

        try {
            final Long idShareValue = Long.valueOf(resultSet.getLong("idShareValue"));
            final Long idShare = Long.valueOf(resultSet.getLong("idShare"));
            final java.math.BigDecimal value = resultSet.getBigDecimal("value");
            final java.sql.Date sqlValueDate = resultSet.getDate("valueDate");
            final jet.java.time.LocalDate valueDate;
            if (sqlValueDate == null) {
                valueDate = null;
            } else {
                valueDate = jet.framework.util.pojo2.imut.ImutDateUtilities.newLocalDate(sqlValueDate);
            }

            shareValueImut = new ShareValueImut(idShareValue, idShare, value, valueDate);

        } catch (final ValidationException e) {
            throw e;
        } catch (final SQLException e) {
            throw new JETException("SQLException while reading from ResultSet.", e);
        }

        return shareValueImut;
    }

}
