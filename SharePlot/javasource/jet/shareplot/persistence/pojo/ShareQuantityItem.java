package jet.shareplot.persistence.pojo;

import java.io.Serializable;

import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.models.ModelHelper;
import jet.framework.util.pojo2.DispatcherModel;
import jet.framework.util.pojo2.Pojo2ErrorHandler;
import jet.framework.util.pojo2.Pojo2ErrorHandlerProvider;
import jet.framework.util.pojo2.interceptor.StringLengthInterceptor;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.logger.LoggerJUnit;
import jet.util.models.SimpleEventModelImpl;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;
import jet.util.throwable.JETSystemError;

/**
 * Simple pojo wrapper for the ShareQuantity Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public class ShareQuantityItem implements Serializable, Pojo2ErrorHandlerProvider {

    private static final long serialVersionUID = 1077646545L;

    private Model dataModel;
    private Logger logger;

    private DispatcherModel<ShareQuantityItem, Long> idShareQuantityDispatcherModel;
    private DispatcherModel<ShareQuantityItem, java.math.BigDecimal> changeFeeDispatcherModel;
    private DispatcherModel<ShareQuantityItem, java.math.BigDecimal> changeQuantityDispatcherModel;
    private DispatcherModel<ShareQuantityItem, String> changeTypeDispatcherModel;
    private DispatcherModel<ShareQuantityItem, java.math.BigDecimal> changeValueDispatcherModel;
    private DispatcherModel<ShareQuantityItem, String> descriptionDispatcherModel;
    private DispatcherModel<ShareQuantityItem, Long> idShareDispatcherModel;
    private DispatcherModel<ShareQuantityItem, java.util.Date> valueDateDispatcherModel;

    private Pojo2ErrorHandler pojo2ErrorHandler;

    /**
     * Constructor used to create a new ShareQuantity Data Model
     */
    public ShareQuantityItem() {
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }

        init_DataModel();
    }

    private void init_DataModel() {
        this.dataModel = new DataModelRootNode();
        this.dataModel.setTagName("ShareQuantity");

        SimpleEventModelImpl model = null;

        model = new SimpleEventModelImpl("idShareQuantity");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("changeFee");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("changeQuantity");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("changeType");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("changeValue");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("description");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("idShare");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("valueDate");
        this.dataModel.appendChild(model);
    }

    /**
     * Constructor used to edit an existing ShareQuantity Data Model
     * @param model Model to use to wrap in the pojo, can not be null
     * @throws IllegalArgumentException if model is null
     */
    public ShareQuantityItem(final Model model) {
        if (model == null) {
            throw new IllegalArgumentException("model argument can not be null");
        }
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }

        this.dataModel = model;
    }

    /**
     * Copy constructor used to clone an existing ShareQuantity Data Model
     * @param shareQuantity ShareQuantityItem to use to copy in the pojo, can not be null
     * @throws IllegalArgumentException if shareQuantity is null
     */
    public ShareQuantityItem(final ShareQuantityItem shareQuantity) {
        this();
        if (shareQuantity == null) {
            throw new IllegalArgumentException("shareQuantity argument can not be null");
        }

        setIdShareQuantity(shareQuantity.getIdShareQuantity());
        setChangeFee(shareQuantity.getChangeFee());
        setChangeQuantity(shareQuantity.getChangeQuantity());
        setChangeType(shareQuantity.getChangeType());
        setChangeValue(shareQuantity.getChangeValue());
        setDescription(shareQuantity.getDescription());
        setIdShare(shareQuantity.getIdShare());
        setValueDate(shareQuantity.getValueDate());
    }

    @Override
    public void setPojo2ErrorHandler(final Pojo2ErrorHandler pojo2ErrorHandler) {
        this.pojo2ErrorHandler = pojo2ErrorHandler;
    }

    @Override
    public Pojo2ErrorHandler getPojo2ErrorHandler() {
        return this.pojo2ErrorHandler;
    }

    /**
     * Get the ShareQuantity Data Model that is wrapped in this pojo
     * @return ShareQuantity Data Model
     */
    public final Model get_Model() {
        return this.dataModel;
    }

    /**
     * Get node value of Data Model node idShareQuantity
     * @return Long value of Data Model node idShareQuantity
     */
    public final Long getIdShareQuantity() {
        return (Long) get_IdShareQuantity_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShareQuantity
     * @param idShareQuantity Long value of Data Model node idShareQuantity
     */
    private final void setIdShareQuantity(final Long idShareQuantity) {
        get_IdShareQuantity_Model().setNodeValue(idShareQuantity);
    }

    /**
     * Get Model of Data Model node idShareQuantity
     * @return Model of Data Model node idShareQuantity
     */
    public final DispatcherModel<ShareQuantityItem, Long> get_IdShareQuantity_Model() {
        if (this.idShareQuantityDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idShareQuantity");
                this.idShareQuantityDispatcherModel = new DispatcherModel<ShareQuantityItem, Long>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named idShareQuantity. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.idShareQuantityDispatcherModel;
    }

    /**
     * Get node value of Data Model node changeFee
     * @return java.math.BigDecimal value of Data Model node changeFee
     */
    public final java.math.BigDecimal getChangeFee() {
        return (java.math.BigDecimal) get_ChangeFee_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node changeFee
     * @param changeFee java.math.BigDecimal value of Data Model node changeFee
     */
    public final void setChangeFee(java.math.BigDecimal changeFee) {
        get_ChangeFee_Model().setNodeValue(changeFee);
    }

    /**
     * Get Model of Data Model node changeFee
     * @return Model of Data Model node changeFee
     */
    public final DispatcherModel<ShareQuantityItem, java.math.BigDecimal> get_ChangeFee_Model() {
        if (this.changeFeeDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "changeFee");
                this.changeFeeDispatcherModel = new DispatcherModel<ShareQuantityItem, java.math.BigDecimal>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named changeFee. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.changeFeeDispatcherModel;
    }

    /**
     * Get node value of Data Model node changeQuantity
     * @return java.math.BigDecimal value of Data Model node changeQuantity
     */
    public final java.math.BigDecimal getChangeQuantity() {
        return (java.math.BigDecimal) get_ChangeQuantity_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node changeQuantity
     * @param changeQuantity java.math.BigDecimal value of Data Model node changeQuantity
     */
    public final void setChangeQuantity(java.math.BigDecimal changeQuantity) {
        get_ChangeQuantity_Model().setNodeValue(changeQuantity);
    }

    /**
     * Get Model of Data Model node changeQuantity
     * @return Model of Data Model node changeQuantity
     */
    public final DispatcherModel<ShareQuantityItem, java.math.BigDecimal> get_ChangeQuantity_Model() {
        if (this.changeQuantityDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "changeQuantity");
                this.changeQuantityDispatcherModel = new DispatcherModel<ShareQuantityItem, java.math.BigDecimal>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named changeQuantity. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.changeQuantityDispatcherModel;
    }

    /**
     * Get node value of Data Model node changeType
     * @return String value of Data Model node changeType
     */
    public final String getChangeType() {
        return (String) get_ChangeType_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node changeType
     * @param changeType String value of Data Model node changeType
     */
    public final void setChangeType(String changeType) {
        get_ChangeType_Model().setNodeValue(changeType);
    }

    /**
     * Get Model of Data Model node changeType
     * @return Model of Data Model node changeType
     */
    public final DispatcherModel<ShareQuantityItem, String> get_ChangeType_Model() {
        if (this.changeTypeDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "changeType");
                this.changeTypeDispatcherModel = new DispatcherModel<ShareQuantityItem, String>(this, sourceModel);

                this.changeTypeDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareQuantityItem>(1));
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named changeType. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.changeTypeDispatcherModel;
    }

    /**
     * Get node value of Data Model node changeValue
     * @return java.math.BigDecimal value of Data Model node changeValue
     */
    public final java.math.BigDecimal getChangeValue() {
        return (java.math.BigDecimal) get_ChangeValue_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node changeValue
     * @param changeValue java.math.BigDecimal value of Data Model node changeValue
     */
    public final void setChangeValue(java.math.BigDecimal changeValue) {
        get_ChangeValue_Model().setNodeValue(changeValue);
    }

    /**
     * Get Model of Data Model node changeValue
     * @return Model of Data Model node changeValue
     */
    public final DispatcherModel<ShareQuantityItem, java.math.BigDecimal> get_ChangeValue_Model() {
        if (this.changeValueDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "changeValue");
                this.changeValueDispatcherModel = new DispatcherModel<ShareQuantityItem, java.math.BigDecimal>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named changeValue. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.changeValueDispatcherModel;
    }

    /**
     * Get node value of Data Model node description
     * @return String value of Data Model node description
     */
    public final String getDescription() {
        return (String) get_Description_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node description
     * @param description String value of Data Model node description
     */
    public final void setDescription(String description) {
        get_Description_Model().setNodeValue(description);
    }

    /**
     * Get Model of Data Model node description
     * @return Model of Data Model node description
     */
    public final DispatcherModel<ShareQuantityItem, String> get_Description_Model() {
        if (this.descriptionDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "description");
                this.descriptionDispatcherModel = new DispatcherModel<ShareQuantityItem, String>(this, sourceModel);

                this.descriptionDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareQuantityItem>(1000));
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named description. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.descriptionDispatcherModel;
    }

    /**
     * Get node value of Data Model node idShare
     * @return Long value of Data Model node idShare
     */
    public final Long getIdShare() {
        return (Long) get_IdShare_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShare
     * @param idShare Long value of Data Model node idShare
     */
    public final void setIdShare(Long idShare) {
        get_IdShare_Model().setNodeValue(idShare);
    }

    /**
     * Get Model of Data Model node idShare
     * @return Model of Data Model node idShare
     */
    public final DispatcherModel<ShareQuantityItem, Long> get_IdShare_Model() {
        if (this.idShareDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idShare");
                this.idShareDispatcherModel = new DispatcherModel<ShareQuantityItem, Long>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named idShare. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.idShareDispatcherModel;
    }

    /**
     * Get node value of Data Model node valueDate
     * @return java.util.Date value of Data Model node valueDate
     */
    public final java.util.Date getValueDate() {
        return (java.util.Date) get_ValueDate_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node valueDate
     * @param valueDate java.util.Date value of Data Model node valueDate
     */
    public final void setValueDate(java.util.Date valueDate) {
        get_ValueDate_Model().setNodeValue(valueDate);
    }

    /**
     * Get Model of Data Model node valueDate
     * @return Model of Data Model node valueDate
     */
    public final DispatcherModel<ShareQuantityItem, java.util.Date> get_ValueDate_Model() {
        if (this.valueDateDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "valueDate");
                this.valueDateDispatcherModel = new DispatcherModel<ShareQuantityItem, java.util.Date>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("ShareQuantity data model does not have a child named valueDate. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.valueDateDispatcherModel;
    }

    /**
     * Check if any node not nullable is null
     * @return true if any node not nullable is null
     */
    public final boolean isNotNullableNull() {
        java.math.BigDecimal changeFee = getChangeFee();
        if (changeFee == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "changeFee is null but is not nullable.");
            return true;
        }
        java.math.BigDecimal changeQuantity = getChangeQuantity();
        if (changeQuantity == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "changeQuantity is null but is not nullable.");
            return true;
        }
        String changeType = getChangeType();
        if (changeType == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "changeType is null but is not nullable.");
            return true;
        }
        java.math.BigDecimal changeValue = getChangeValue();
        if (changeValue == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "changeValue is null but is not nullable.");
            return true;
        }
        Long idShare = getIdShare();
        if (idShare == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "idShare is null but is not nullable.");
            return true;
        }
        java.util.Date valueDate = getValueDate();
        if (valueDate == null) {
            this.logger.logp(JETLevel.WARNING, "ShareQuantityItem", "isNotNullableNull",
                "valueDate is null but is not nullable.");
            return true;
        }
        return false;
    }

    /**
     * Check if this PK is the same as the PK from another ShareQuantityItem
     *
     * @param other ShareQuantityItem to compare with
     * @return <code>true</code> if the pk fields from the two objects have the same values
     */
    public final boolean isPkEquals(final ShareQuantityItem other) {
        boolean result = false;

        if ( getIdShareQuantity() != null) {
            if ( getIdShareQuantity().equals(other.getIdShareQuantity())) {
                result = true;
            }
        }

        return result;
    }

}
