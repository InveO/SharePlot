package jet.shareplot.persistence.pojo;

import java.io.Serializable;

import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.models.ModelHelper;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.logger.LoggerJUnit;
import jet.util.models.SimpleEventModelImpl;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;
import jet.util.throwable.JETSystemError;

/**
 * Simple pojo wrapper for the ShareValue Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 * 
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public class ShareValueItem implements Cloneable, Serializable {

    private static final long serialVersionUID = 1461049825L;

    private Model dataModel;
    private Logger logger;

    /**
     * Constructor used to create a new ShareValue Data Model
     */
    public ShareValueItem() {
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }
		
        init_DataModel();
    }

    private void init_DataModel() {
        this.dataModel = new DataModelRootNode();
        this.dataModel.setTagName("ShareValue");
        
        SimpleEventModelImpl model = null;
        
        model = new SimpleEventModelImpl("idShareValue");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("isShare");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("valueDate");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("value");
        this.dataModel.appendChild(model);
    }
    
    /**
     * Constructor used to edit an existing ShareValue Data Model
     * @param model Model to use to wrap in the pojo, can not be null
     * @throws IllegalArgumentException if model is null
     */
    public ShareValueItem(final Model model) {
        if (model == null) {
            throw new IllegalArgumentException("model argument can not be null");
        }
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }
        
        this.dataModel = model;
    }
    
    /**
     * Get a ShareValueItem initialized from a Model that has the same structure but contains
     * only String node values. These will be converted to the proper DataModel node value
     * types.
     * 
     * @param untypedModel Model with String node values
     * @return ShareValueItem
     */
    public final static ShareValueItem getFromUntypedModel(final Model untypedModel) {
        final ShareValueItem item = new ShareValueItem();
        
        String sValue = null;
        
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "idShareValue");
            if (sValue != null) {
                item.setIdShareValue(Long.valueOf(sValue));
            }
        } catch (final JETException e) {
            item.logger.logp(JETLevel.INFO, "ShareValueItem", "getFromUntypedModel", e.getMessage(), e);
        }
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "isShare");
            if (sValue != null) {
                item.setIsShare(Long.valueOf(sValue));
            }
        } catch (final JETException e) {
            item.logger.logp(JETLevel.INFO, "ShareValueItem", "getFromUntypedModel", e.getMessage(), e);
        }
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "valueDate");
            if (sValue != null) {
                Long timestamp = Long.valueOf(sValue);
                item.setValueDate(new java.util.Date(timestamp.longValue()));
            }
        } catch (final JETException e) {
            item.logger.logp(JETLevel.INFO, "ShareValueItem", "getFromUntypedModel", e.getMessage(), e);
        }
        try {
            sValue = ModelHelper.getChildNodeValueAsString(untypedModel, "value");
            if (sValue != null) {
                item.setValue(new java.math.BigDecimal(sValue));
            }
        } catch (final JETException e) {
            item.logger.logp(JETLevel.INFO, "ShareValueItem", "getFromUntypedModel", e.getMessage(), e);
        }
        return item;
    }

    /**
     * Get the ShareValue Data Model that is wrapped in this pojo
     * @return ShareValue Data Model
     */
    public Model get_Model() {
        return this.dataModel;
    }
    
    /**
     * Create a clone of the ShareValueItem pojo, the will clone the underlying data model
     * @return ShareValueItem pojo
     */
    @Override
    public ShareValueItem clone() throws CloneNotSupportedException {
        final ShareValueItem clonedItem = (ShareValueItem) super.clone();
        clonedItem.init_DataModel();
        clonedItem.setIdShareValue(getIdShareValue());
        clonedItem.setIsShare(getIsShare());
        clonedItem.setValueDate(getValueDate());
        clonedItem.setValue(getValue());
        return clonedItem;
    }

    /**
     * Get node value of Data Model node idShareValue
     * @return Long value of Data Model node idShareValue
     */
    public Long getIdShareValue() {
        try {
            final Model model = ModelHelper.getChildNode(this.dataModel, "idShareValue");
            return (Long) model.getNodeValue();
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named idShareValue. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Set node value of Data Model node idShareValue
     * @param idShareValue Long value of Data Model node idShareValue
     */
    private final void setIdShareValue(final Long idShareValue) {
        Long tmp = idShareValue;
        try {
            ModelHelper.setChildNodeValue(this.dataModel, "idShareValue", tmp);
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named idShareValue. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Get Model of Data Model node idShareValue
     * @return Model of Data Model node idShareValue
     */
    public Model get_IdShareValue_Model() {
        try {
            return ModelHelper.getChildNode(this.dataModel, "idShareValue");
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named idShareValue. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }

    /**
     * Get node value of Data Model node isShare
     * @return Long value of Data Model node isShare
     */
    public Long getIsShare() {
        try {
            final Model model = ModelHelper.getChildNode(this.dataModel, "isShare");
            return (Long) model.getNodeValue();
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named isShare. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Set node value of Data Model node isShare
     * @param isShare Long value of Data Model node isShare
     */
    public final void setIsShare(Long isShare) {
        Long tmp = isShare;
        try {
            ModelHelper.setChildNodeValue(this.dataModel, "isShare", tmp);
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named isShare. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Get Model of Data Model node isShare
     * @return Model of Data Model node isShare
     */
    public Model get_IsShare_Model() {
        try {
            return ModelHelper.getChildNode(this.dataModel, "isShare");
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named isShare. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }

    /**
     * Get node value of Data Model node valueDate
     * @return java.util.Date value of Data Model node valueDate
     */
    public java.util.Date getValueDate() {
        try {
            final Model model = ModelHelper.getChildNode(this.dataModel, "valueDate");
            return (java.util.Date) model.getNodeValue();
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named valueDate. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Set node value of Data Model node valueDate
     * @param valueDate java.util.Date value of Data Model node valueDate
     */
    public final void setValueDate(java.util.Date valueDate) {
        java.util.Date tmp = valueDate;
        try {
            ModelHelper.setChildNodeValue(this.dataModel, "valueDate", tmp);
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named valueDate. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Get Model of Data Model node valueDate
     * @return Model of Data Model node valueDate
     */
    public Model get_ValueDate_Model() {
        try {
            return ModelHelper.getChildNode(this.dataModel, "valueDate");
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named valueDate. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }

    /**
     * Get node value of Data Model node value
     * @return java.math.BigDecimal value of Data Model node value
     */
    public java.math.BigDecimal getValue() {
        try {
            final Model model = ModelHelper.getChildNode(this.dataModel, "value");
            return (java.math.BigDecimal) model.getNodeValue();
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named value. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Set node value of Data Model node value
     * @param value java.math.BigDecimal value of Data Model node value
     */
    public final void setValue(java.math.BigDecimal value) {
        java.math.BigDecimal tmp = value;
        try {
            ModelHelper.setChildNodeValue(this.dataModel, "value", tmp);
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named value. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }
    
    /**
     * Get Model of Data Model node value
     * @return Model of Data Model node value
     */
    public Model get_Value_Model() {
        try {
            return ModelHelper.getChildNode(this.dataModel, "value");
        } catch (final JETException e) {
            throw new JETSystemError("ShareValue data model does not have a child named value. Should be impossible, " 
                    + "if the pojo and datamodel are up to date.", e);
        }
    }

    /**
     * Check if any node not nullable is null
     * @return true if any node not nullable is null
     */
    public boolean isNotNullableNull() {
        Long isShare = getIsShare();
        if (isShare == null) {
            this.logger.logp(JETLevel.WARNING, "ShareValueItem", "isNotNullableNull", 
                "isShare is null but is not nullable.");
            return true;
        }
        java.util.Date valueDate = getValueDate();
        if (valueDate == null) {
            this.logger.logp(JETLevel.WARNING, "ShareValueItem", "isNotNullableNull", 
                "valueDate is null but is not nullable.");
            return true;
        }
        java.math.BigDecimal value = getValue();
        if (value == null) {
            this.logger.logp(JETLevel.WARNING, "ShareValueItem", "isNotNullableNull", 
                "value is null but is not nullable.");
            return true;
        }
        return false;
    }
    
    
}
