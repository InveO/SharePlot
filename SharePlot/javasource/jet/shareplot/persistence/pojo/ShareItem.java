package jet.shareplot.persistence.pojo;

import java.io.Serializable;

import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.models.ModelHelper;
import jet.framework.util.pojo2.DispatcherModel;
import jet.framework.util.pojo2.Pojo2ErrorHandler;
import jet.framework.util.pojo2.Pojo2ErrorHandlerProvider;
import jet.framework.util.pojo2.interceptor.StringLengthInterceptor;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.logger.LoggerJUnit;
import jet.util.models.SimpleEventModelImpl;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;
import jet.util.throwable.JETSystemError;

/**
 * Simple pojo wrapper for the Share Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public class ShareItem implements Serializable, Pojo2ErrorHandlerProvider {

    private static final long serialVersionUID = -1265738400L;

    private Model dataModel;
    private Logger logger;

    private DispatcherModel<ShareItem, Long> idShareDispatcherModel;
    private DispatcherModel<ShareItem, String> codeISINDispatcherModel;
    private DispatcherModel<ShareItem, String> codeYahooDispatcherModel;
    private DispatcherModel<ShareItem, String> descriptionDispatcherModel;
    private DispatcherModel<ShareItem, Long> idPortfolioDispatcherModel;
    private DispatcherModel<ShareItem, String> nameDispatcherModel;

    private Pojo2ErrorHandler pojo2ErrorHandler;

    /**
     * Constructor used to create a new Share Data Model
     */
    public ShareItem() {
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }

        init_DataModel();
    }

    private void init_DataModel() {
        this.dataModel = new DataModelRootNode();
        this.dataModel.setTagName("Share");

        SimpleEventModelImpl model = null;

        model = new SimpleEventModelImpl("idShare");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeISIN");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeYahoo");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("description");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("idPortfolio");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("name");
        this.dataModel.appendChild(model);
    }

    /**
     * Constructor used to edit an existing Share Data Model
     * @param model Model to use to wrap in the pojo, can not be null
     * @throws IllegalArgumentException if model is null
     */
    public ShareItem(final Model model) {
        if (model == null) {
            throw new IllegalArgumentException("model argument can not be null");
        }
        // initialise the logger
        try {
            final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
            this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
        } catch (final JETSystemError e) {
            // probably running in junit, use junitLogger
            this.logger = LoggerJUnit.getInstance();
        }

        this.dataModel = model;
    }

    /**
     * Copy constructor used to clone an existing Share Data Model
     * @param share ShareItem to use to copy in the pojo, can not be null
     * @throws IllegalArgumentException if share is null
     */
    public ShareItem(final ShareItem share) {
        this();
        if (share == null) {
            throw new IllegalArgumentException("share argument can not be null");
        }

        setIdShare(share.getIdShare());
        setCodeISIN(share.getCodeISIN());
        setCodeYahoo(share.getCodeYahoo());
        setDescription(share.getDescription());
        setIdPortfolio(share.getIdPortfolio());
        setName(share.getName());
    }

    @Override
    public void setPojo2ErrorHandler(final Pojo2ErrorHandler pojo2ErrorHandler) {
        this.pojo2ErrorHandler = pojo2ErrorHandler;
    }

    @Override
    public Pojo2ErrorHandler getPojo2ErrorHandler() {
        return this.pojo2ErrorHandler;
    }

    /**
     * Get the Share Data Model that is wrapped in this pojo
     * @return Share Data Model
     */
    public final Model get_Model() {
        return this.dataModel;
    }

    /**
     * Get node value of Data Model node idShare
     * @return Long value of Data Model node idShare
     */
    public final Long getIdShare() {
        return (Long) get_IdShare_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShare
     * @param idShare Long value of Data Model node idShare
     */
    private final void setIdShare(final Long idShare) {
        get_IdShare_Model().setNodeValue(idShare);
    }

    /**
     * Get Model of Data Model node idShare
     * @return Model of Data Model node idShare
     */
    public final DispatcherModel<ShareItem, Long> get_IdShare_Model() {
        if (this.idShareDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idShare");
                this.idShareDispatcherModel = new DispatcherModel<ShareItem, Long>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named idShare. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.idShareDispatcherModel;
    }

    /**
     * Get node value of Data Model node codeISIN
     * @return String value of Data Model node codeISIN
     */
    public final String getCodeISIN() {
        return (String) get_CodeISIN_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeISIN
     * @param codeISIN String value of Data Model node codeISIN
     */
    public final void setCodeISIN(String codeISIN) {
        get_CodeISIN_Model().setNodeValue(codeISIN);
    }

    /**
     * Get Model of Data Model node codeISIN
     * @return Model of Data Model node codeISIN
     */
    public final DispatcherModel<ShareItem, String> get_CodeISIN_Model() {
        if (this.codeISINDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "codeISIN");
                this.codeISINDispatcherModel = new DispatcherModel<ShareItem, String>(this, sourceModel);

                this.codeISINDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareItem>(45));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named codeISIN. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.codeISINDispatcherModel;
    }

    /**
     * Get node value of Data Model node codeYahoo
     * @return String value of Data Model node codeYahoo
     */
    public final String getCodeYahoo() {
        return (String) get_CodeYahoo_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeYahoo
     * @param codeYahoo String value of Data Model node codeYahoo
     */
    public final void setCodeYahoo(String codeYahoo) {
        get_CodeYahoo_Model().setNodeValue(codeYahoo);
    }

    /**
     * Get Model of Data Model node codeYahoo
     * @return Model of Data Model node codeYahoo
     */
    public final DispatcherModel<ShareItem, String> get_CodeYahoo_Model() {
        if (this.codeYahooDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "codeYahoo");
                this.codeYahooDispatcherModel = new DispatcherModel<ShareItem, String>(this, sourceModel);

                this.codeYahooDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareItem>(45));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named codeYahoo. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.codeYahooDispatcherModel;
    }

    /**
     * Get node value of Data Model node description
     * @return String value of Data Model node description
     */
    public final String getDescription() {
        return (String) get_Description_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node description
     * @param description String value of Data Model node description
     */
    public final void setDescription(String description) {
        get_Description_Model().setNodeValue(description);
    }

    /**
     * Get Model of Data Model node description
     * @return Model of Data Model node description
     */
    public final DispatcherModel<ShareItem, String> get_Description_Model() {
        if (this.descriptionDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "description");
                this.descriptionDispatcherModel = new DispatcherModel<ShareItem, String>(this, sourceModel);

                this.descriptionDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareItem>(4000));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named description. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.descriptionDispatcherModel;
    }

    /**
     * Get node value of Data Model node idPortfolio
     * @return Long value of Data Model node idPortfolio
     */
    public final Long getIdPortfolio() {
        return (Long) get_IdPortfolio_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idPortfolio
     * @param idPortfolio Long value of Data Model node idPortfolio
     */
    public final void setIdPortfolio(Long idPortfolio) {
        get_IdPortfolio_Model().setNodeValue(idPortfolio);
    }

    /**
     * Get Model of Data Model node idPortfolio
     * @return Model of Data Model node idPortfolio
     */
    public final DispatcherModel<ShareItem, Long> get_IdPortfolio_Model() {
        if (this.idPortfolioDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idPortfolio");
                this.idPortfolioDispatcherModel = new DispatcherModel<ShareItem, Long>(this, sourceModel);
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named idPortfolio. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.idPortfolioDispatcherModel;
    }

    /**
     * Get node value of Data Model node name
     * @return String value of Data Model node name
     */
    public final String getName() {
        return (String) get_Name_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node name
     * @param name String value of Data Model node name
     */
    public final void setName(String name) {
        get_Name_Model().setNodeValue(name);
    }

    /**
     * Get Model of Data Model node name
     * @return Model of Data Model node name
     */
    public final DispatcherModel<ShareItem, String> get_Name_Model() {
        if (this.nameDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "name");
                this.nameDispatcherModel = new DispatcherModel<ShareItem, String>(this, sourceModel);

                this.nameDispatcherModel.addInterceptor(new StringLengthInterceptor<ShareItem>(255));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named name. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        return this.nameDispatcherModel;
    }

    /**
     * Check if any node not nullable is null
     * @return true if any node not nullable is null
     */
    public final boolean isNotNullableNull() {
        Long idPortfolio = getIdPortfolio();
        if (idPortfolio == null) {
            this.logger.logp(JETLevel.WARNING, "ShareItem", "isNotNullableNull",
                "idPortfolio is null but is not nullable.");
            return true;
        }
        String name = getName();
        if (name == null) {
            this.logger.logp(JETLevel.WARNING, "ShareItem", "isNotNullableNull",
                "name is null but is not nullable.");
            return true;
        }
        return false;
    }

    /**
     * Check if this PK is the same as the PK from another ShareItem
     *
     * @param other ShareItem to compare with
     * @return <code>true</code> if the pk fields from the two objects have the same values
     */
    public final boolean isPkEquals(final ShareItem other) {
        boolean result = false;

        if ( getIdShare() != null) {
            if ( getIdShare().equals(other.getIdShare())) {
                result = true;
            }
        }

        return result;
    }

}
