package jet.shareplot.persistence.pojo;

import java.io.Serializable;

import org.eclipse.jdt.annotation.NonNull;

import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.models.ModelHelper;
import jet.framework.util.pojo2.DispatcherModel;
import jet.framework.util.pojo2.JFDataItem;
import jet.framework.util.pojo2.JFErrorHandler;
import jet.framework.util.pojo2.JFErrorHandlerProvider;
import jet.framework.util.pojo2.interceptor.StringLengthInterceptor;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.logger.LoggerJUnit;
import jet.util.models.SimpleEventModelImpl;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;
import jet.util.throwable.JETSystemError;

/**
 * Simple pojo wrapper for the Share Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public class ShareItem implements Serializable, JFErrorHandlerProvider, JFDataItem {

    private static final long serialVersionUID = -1939421298L;

    private static final String ATTRIBUTE_DISPATCHER_MODEL = "jet.shareplot.persistence.pojo.ATTRIBUTE_DISPATCHER_MODEL";

    private final Model dataModel;
    private transient Logger logger;

    private transient DispatcherModel<ShareItem> idShareDispatcherModel;
    private transient DispatcherModel<ShareItem> codeISINDispatcherModel;
    private transient DispatcherModel<ShareItem> codeYahooDispatcherModel;
    private transient DispatcherModel<ShareItem> descriptionDispatcherModel;
    private transient DispatcherModel<ShareItem> nameDispatcherModel;

    private transient JFErrorHandler jfErrorHandler;

    /**
     * Constructor used to create a new Share Data Model.
     */
    public ShareItem() {
        this.dataModel = new DataModelRootNode();
        init_DataModel();
    }

    private void init_DataModel() {
        this.dataModel.setTagName("Share");

        SimpleEventModelImpl model = null;

        model = new SimpleEventModelImpl("idShare");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeISIN");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeYahoo");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("description");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("name");
        this.dataModel.appendChild(model);
    }

    /**
     * Constructor used to edit an existing Share Data Model.
     *
     * @param model Model to use to wrap in the pojo, can not be <code>null</code>
     */
    public ShareItem(@NonNull final Model model) {
        this.dataModel = model;
    }

    /**
     * Copy constructor used to clone an existing Share Data Model.
     *
     * @param share ShareItem to use to copy in the pojo, can not be <code>null</code>
     */
    public ShareItem(@NonNull final ShareItem share) {
        this();

        setIdShare(share.getIdShare());
        setCodeISIN(share.getCodeISIN());
        setCodeYahoo(share.getCodeYahoo());
        setDescription(share.getDescription());
        setName(share.getName());
    }

    private Logger getLogger() {
        if (this.logger == null) {
            // initialise the logger
            try {
                final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
                this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo");
            } catch (final JETSystemError e) {
                // probably running in junit, use junitLogger
                this.logger = LoggerJUnit.getInstance();
            }
        }
        return this.logger;
    }

    @Override
    public final boolean isDirty() {
        if (get_Model() instanceof DataModelRootNode) {
            final DataModelRootNode dmrn = (DataModelRootNode) get_Model();
            return dmrn.isDirty();
        }
        getLogger().logp(JETLevel.INFO, "ShareItem", "isDirty", "Model is not a DataModelRootNode can not define if it is dirty.");
        return false;
    }

    /**
     * Check if this share is new.
     *
     * @return <code>true</code> if this share is new.
     * @see JFDataItem
     */
    @Override
    public final boolean isNew() {
        return getIdShare() == null;
    }

    /* (non-Javadoc)
     * @see JFErrorHandlerProvider#setJFErrorHandler(JFErrorHandler)
     */
    @Override
    public final void setJFErrorHandler(final JFErrorHandler jfErrorHandler) {
        this.jfErrorHandler = jfErrorHandler;
    }

    /* (non-Javadoc)
     * @see JFErrorHandlerProvider#getJFErrorHandler()
     */
    @Override
    public final JFErrorHandler getJFErrorHandler() {
        return this.jfErrorHandler;
    }

    /**
     * Get the Share Data Model that is wrapped in this pojo.
     *
     * @return Share Data Model
     * @see JFDataItem
     */
    @Override
    @NonNull
    public final Model get_Model() {
        Model model = this.dataModel;
        assert model != null;
        return model;
    }

    /**
     * Get node value of Data Model node idShare.
     * This field should not be <code>null</code> in the database.
     *
     * @return Long value of Data Model node idShare
     */
    public final Long getIdShare() {
        return (Long) get_IdShare_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShare.
     * This field should not be <code>null</code> in the database.
     *
     * @param idShare Long value of Data Model node idShare
     */
    private final void setIdShare(final Long idShare) {
        get_IdShare_Model().setNodeValue(idShare);
    }

    /**
     * Get Model of Data Model node idShare.
     *
     * @return Model of Data Model node idShare
     */
    @SuppressWarnings("unchecked")
    @NonNull
    public final DispatcherModel<ShareItem> get_IdShare_Model() {
        if (this.idShareDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(get_Model(), "idShare");
                this.idShareDispatcherModel = (DispatcherModel<ShareItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.idShareDispatcherModel == null) {
                    this.idShareDispatcherModel = new DispatcherModel<ShareItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.idShareDispatcherModel);
                    sourceModel.setAttribute(DispatcherModel.DISPATCHER_MODEL_ATTRIBUTE, this.idShareDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named idShare. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<ShareItem> dm = this.idShareDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node codeISIN.
     *
     * @return String value of Data Model node codeISIN
     */
    public final String getCodeISIN() {
        return (String) get_CodeISIN_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeISIN.
     *
     * @param codeISIN String value of Data Model node codeISIN
     */
    public final void setCodeISIN(final String codeISIN) {
        get_CodeISIN_Model().setNodeValue(codeISIN);
    }

    /**
     * Get Model of Data Model node codeISIN.
     *
     * @return Model of Data Model node codeISIN
     */
    @SuppressWarnings("unchecked")
    @NonNull
    public final DispatcherModel<ShareItem> get_CodeISIN_Model() {
        if (this.codeISINDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(get_Model(), "codeISIN");
                this.codeISINDispatcherModel = (DispatcherModel<ShareItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.codeISINDispatcherModel == null) {
                    this.codeISINDispatcherModel = new DispatcherModel<ShareItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.codeISINDispatcherModel);
                    sourceModel.setAttribute(DispatcherModel.DISPATCHER_MODEL_ATTRIBUTE, this.codeISINDispatcherModel);
                }

                this.codeISINDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(45));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named codeISIN. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<ShareItem> dm = this.codeISINDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node codeYahoo.
     *
     * @return String value of Data Model node codeYahoo
     */
    public final String getCodeYahoo() {
        return (String) get_CodeYahoo_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeYahoo.
     *
     * @param codeYahoo String value of Data Model node codeYahoo
     */
    public final void setCodeYahoo(final String codeYahoo) {
        get_CodeYahoo_Model().setNodeValue(codeYahoo);
    }

    /**
     * Get Model of Data Model node codeYahoo.
     *
     * @return Model of Data Model node codeYahoo
     */
    @SuppressWarnings("unchecked")
    @NonNull
    public final DispatcherModel<ShareItem> get_CodeYahoo_Model() {
        if (this.codeYahooDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(get_Model(), "codeYahoo");
                this.codeYahooDispatcherModel = (DispatcherModel<ShareItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.codeYahooDispatcherModel == null) {
                    this.codeYahooDispatcherModel = new DispatcherModel<ShareItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.codeYahooDispatcherModel);
                    sourceModel.setAttribute(DispatcherModel.DISPATCHER_MODEL_ATTRIBUTE, this.codeYahooDispatcherModel);
                }

                this.codeYahooDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(45));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named codeYahoo. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<ShareItem> dm = this.codeYahooDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node description.
     *
     * @return String value of Data Model node description
     */
    public final String getDescription() {
        return (String) get_Description_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node description.
     *
     * @param description String value of Data Model node description
     */
    public final void setDescription(final String description) {
        get_Description_Model().setNodeValue(description);
    }

    /**
     * Get Model of Data Model node description.
     *
     * @return Model of Data Model node description
     */
    @SuppressWarnings("unchecked")
    @NonNull
    public final DispatcherModel<ShareItem> get_Description_Model() {
        if (this.descriptionDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(get_Model(), "description");
                this.descriptionDispatcherModel = (DispatcherModel<ShareItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.descriptionDispatcherModel == null) {
                    this.descriptionDispatcherModel = new DispatcherModel<ShareItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.descriptionDispatcherModel);
                    sourceModel.setAttribute(DispatcherModel.DISPATCHER_MODEL_ATTRIBUTE, this.descriptionDispatcherModel);
                }

                this.descriptionDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(4000));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named description. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<ShareItem> dm = this.descriptionDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node name.
     * This field should not be <code>null</code> in the database.
     *
     * @return String value of Data Model node name
     */
    public final String getName() {
        return (String) get_Name_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node name.
     * This field should not be <code>null</code> in the database.
     *
     * @param name String value of Data Model node name
     */
    public final void setName(final String name) {
        get_Name_Model().setNodeValue(name);
    }

    /**
     * Get Model of Data Model node name.
     *
     * @return Model of Data Model node name
     */
    @SuppressWarnings("unchecked")
    @NonNull
    public final DispatcherModel<ShareItem> get_Name_Model() {
        if (this.nameDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(get_Model(), "name");
                this.nameDispatcherModel = (DispatcherModel<ShareItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.nameDispatcherModel == null) {
                    this.nameDispatcherModel = new DispatcherModel<ShareItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.nameDispatcherModel);
                    sourceModel.setAttribute(DispatcherModel.DISPATCHER_MODEL_ATTRIBUTE, this.nameDispatcherModel);
                }

                this.nameDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(255));
            } catch (final JETException e) {
                throw new JETSystemError("Share data model does not have a child named name. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<ShareItem> dm = this.nameDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Check if any node not nullable is <code>null</code>.
     * <ul>
     * <li><b>name</b> can not be <code>null</code> in the database.</li>
     * </ul>
     *
     * @return <code>true</code> if any node not nullable is <code>null</code>
     * @see JFDataItem
     */
    @Override
    public final boolean isNotNullableNull() {
        final String name = getName();
        if (name == null) {
            getLogger().logp(JETLevel.WARNING, "ShareItem", "isNotNullableNull",
                "name is null but is not nullable.");
            return true;
        }
        return false;
    }

    /**
     * Check if this PK is the same as the PK from another ShareItem.
     *
     * @param other ShareItem to compare with
     * @return <code>true</code> if the pk fields from the two objects have the same values
     * @see JFDataItem
     */
    @Override
    public final boolean isPkEquals(final JFDataItem other) {
        boolean result = false;
        
        if ( getIdShare() != null) {
            if (other instanceof ShareItem) {
                final ShareItem otherShare = (ShareItem) other;
                if ( getIdShare().equals(otherShare.getIdShare())) {
                    result = true;
                }
            }
        }
        
        return result;
    }
}
