package jet.shareplot.persistence.pojo.merged;

import java.io.Serializable;

import javax.annotation.Nonnull;

import jet.framework.manager.datamodel.interfaces.DataModelRootNode;
import jet.framework.util.models.ModelHelper;
import jet.framework.util.pojo2.DispatcherModel;
import jet.framework.util.pojo2.JFDataItem;
import jet.framework.util.pojo2.JFErrorHandler;
import jet.framework.util.pojo2.JFErrorHandlerProvider;
import jet.framework.util.pojo2.interceptor.StringLengthInterceptor;
import jet.util.logger.JETLevel;
import jet.util.logger.JETLoggerManager;
import jet.util.logger.Logger;
import jet.util.logger.LoggerJUnit;
import jet.util.models.SimpleEventModelImpl;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;
import jet.util.throwable.JETSystemError;

/**
 * Simple pojo wrapper for the FullShareValue Data Model.
 *
 * Generated by JetTools, do not edit this file directly.
 *
 * @author JetToolsFramework
 */
@SuppressWarnings("PMD.MethodNamingConventions")
public class FullShareValueItem implements Serializable, JFErrorHandlerProvider, JFDataItem {

    private static final long serialVersionUID = 1L;

    private static final String ATTRIBUTE_DISPATCHER_MODEL = "jet.shareplot.persistence.pojo.merged.ATTRIBUTE_DISPATCHER_MODEL";

    private final Model dataModel;
    private transient Logger logger;

    private transient DispatcherModel<FullShareValueItem> idShareValueDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> codeISINDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> codeYahooDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> descriptionDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> idPortfolioDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> idShareDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> nameDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> valueDispatcherModel;
    private transient DispatcherModel<FullShareValueItem> valueDateDispatcherModel;

    private transient JFErrorHandler jfErrorHandler;

    /**
     * Constructor used to create a new FullShareValue Data Model
     */
    public FullShareValueItem() {
        this.dataModel = new DataModelRootNode();
        init_DataModel();
    }

    private void init_DataModel() {
        this.dataModel.setTagName("FullShareValue");

        SimpleEventModelImpl model = null;

        model = new SimpleEventModelImpl("idShareValue");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeISIN");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("codeYahoo");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("description");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("idPortfolio");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("idShare");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("name");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("value");
        this.dataModel.appendChild(model);
        model = new SimpleEventModelImpl("valueDate");
        this.dataModel.appendChild(model);
    }

    /**
     * Constructor used to edit an existing FullShareValue Data Model
     * @param model Model to use to wrap in the pojo, can not be <code>null</code>
     * @throws IllegalArgumentException if model is <code>null</code>
     */
    public FullShareValueItem(final Model model) {
        if (model == null) {
            throw new IllegalArgumentException("model argument can not be null");
        }
        this.dataModel = model;
    }

    /**
     * Copy constructor used to clone an existing FullShareValue Data Model
     * @param fullShareValue FullShareValueItem to use to copy in the pojo, can not be <code>null</code>
     * @throws IllegalArgumentException if fullShareValue is <code>null</code>
     */
    public FullShareValueItem(final FullShareValueItem fullShareValue) {
        this();
        if (fullShareValue == null) {
            throw new IllegalArgumentException("fullShareValue argument can not be null");
        }

        setIdShareValue(fullShareValue.getIdShareValue());
        setCodeISIN(fullShareValue.getCodeISIN());
        setCodeYahoo(fullShareValue.getCodeYahoo());
        setDescription(fullShareValue.getDescription());
        setIdPortfolio(fullShareValue.getIdPortfolio());
        setIdShare(fullShareValue.getIdShare());
        setName(fullShareValue.getName());
        setValue(fullShareValue.getValue());
        setValueDate(fullShareValue.getValueDate());
    }

    private Logger getLogger() {
        if (this.logger == null) {
            // initialise the logger
            try {
                final JETLoggerManager loggerManager = JETLoggerManager.getJETLoggerManager();
                this.logger = loggerManager.getLogger("jet.shareplot.persistence.pojo.merged");
            } catch (final JETSystemError e) {
                // probably running in junit, use junitLogger
                this.logger = LoggerJUnit.getInstance();
            }
        }
        return this.logger;
    }

    /**
     * @return <code>true</code> if this fullShareValue is new.
     * @see JFDataItem
     */
    @Override
    public final boolean isNew() {
        return getIdShareValue() == null;
    }

    /* (non-Javadoc)
     * @see JFErrorHandlerProvider#setJFErrorHandler(JFErrorHandler)
     */
    @Override
    public void setJFErrorHandler(final JFErrorHandler jfErrorHandler) {
        this.jfErrorHandler = jfErrorHandler;
    }

    /* (non-Javadoc)
     * @see JFErrorHandlerProvider#getJFErrorHandler()
     */
    @Override
    public JFErrorHandler getJFErrorHandler() {
        return this.jfErrorHandler;
    }

    /**
     * Get the FullShareValue Data Model that is wrapped in this pojo
     * @return FullShareValue Data Model
     * @see JFDataItem
     */
    @Override
    @Nonnull
    public final Model get_Model() {
        Model model = this.dataModel;
        assert model != null;
        return model;
    }

    /**
     * Get node value of Data Model node idShareValue
     * This field should not be <code>null</code> in the database.
     * @return Long value of Data Model node idShareValue
     */
    public final Long getIdShareValue() {
        return (Long) get_IdShareValue_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShareValue
     * This field should not be <code>null</code> in the database.
     * @param idShareValue Long value of Data Model node idShareValue
     */
    private final void setIdShareValue(final Long idShareValue) {
        get_IdShareValue_Model().setNodeValue(idShareValue);
    }

    /**
     * Get Model of Data Model node idShareValue
     * @return Model of Data Model node idShareValue
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_IdShareValue_Model() {
        if (this.idShareValueDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idShareValue");
                this.idShareValueDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.idShareValueDispatcherModel == null) {
                    this.idShareValueDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.idShareValueDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named idShareValue. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.idShareValueDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node codeISIN
     * @return String value of Data Model node codeISIN
     */
    public final String getCodeISIN() {
        return (String) get_CodeISIN_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeISIN
     * @param codeISIN String value of Data Model node codeISIN
     */
    public final void setCodeISIN(String codeISIN) {
        get_CodeISIN_Model().setNodeValue(codeISIN);
    }

    /**
     * Get Model of Data Model node codeISIN
     * @return Model of Data Model node codeISIN
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_CodeISIN_Model() {
        if (this.codeISINDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "codeISIN");
                this.codeISINDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.codeISINDispatcherModel == null) {
                    this.codeISINDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.codeISINDispatcherModel);
                }

                this.codeISINDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(45));
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named codeISIN. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.codeISINDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node codeYahoo
     * @return String value of Data Model node codeYahoo
     */
    public final String getCodeYahoo() {
        return (String) get_CodeYahoo_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node codeYahoo
     * @param codeYahoo String value of Data Model node codeYahoo
     */
    public final void setCodeYahoo(String codeYahoo) {
        get_CodeYahoo_Model().setNodeValue(codeYahoo);
    }

    /**
     * Get Model of Data Model node codeYahoo
     * @return Model of Data Model node codeYahoo
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_CodeYahoo_Model() {
        if (this.codeYahooDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "codeYahoo");
                this.codeYahooDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.codeYahooDispatcherModel == null) {
                    this.codeYahooDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.codeYahooDispatcherModel);
                }

                this.codeYahooDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(45));
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named codeYahoo. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.codeYahooDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node description
     * @return String value of Data Model node description
     */
    public final String getDescription() {
        return (String) get_Description_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node description
     * @param description String value of Data Model node description
     */
    public final void setDescription(String description) {
        get_Description_Model().setNodeValue(description);
    }

    /**
     * Get Model of Data Model node description
     * @return Model of Data Model node description
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_Description_Model() {
        if (this.descriptionDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "description");
                this.descriptionDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.descriptionDispatcherModel == null) {
                    this.descriptionDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.descriptionDispatcherModel);
                }

                this.descriptionDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(4000));
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named description. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.descriptionDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node idPortfolio
     * This field should not be <code>null</code> in the database.
     * @return Long value of Data Model node idPortfolio
     */
    public final Long getIdPortfolio() {
        return (Long) get_IdPortfolio_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idPortfolio
     * This field should not be <code>null</code> in the database.
     * @param idPortfolio Long value of Data Model node idPortfolio
     */
    public final void setIdPortfolio(Long idPortfolio) {
        get_IdPortfolio_Model().setNodeValue(idPortfolio);
    }

    /**
     * Get Model of Data Model node idPortfolio
     * @return Model of Data Model node idPortfolio
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_IdPortfolio_Model() {
        if (this.idPortfolioDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idPortfolio");
                this.idPortfolioDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.idPortfolioDispatcherModel == null) {
                    this.idPortfolioDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.idPortfolioDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named idPortfolio. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.idPortfolioDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node idShare
     * This field should not be <code>null</code> in the database.
     * @return Long value of Data Model node idShare
     */
    public final Long getIdShare() {
        return (Long) get_IdShare_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node idShare
     * This field should not be <code>null</code> in the database.
     * @param idShare Long value of Data Model node idShare
     */
    public final void setIdShare(Long idShare) {
        get_IdShare_Model().setNodeValue(idShare);
    }

    /**
     * Get Model of Data Model node idShare
     * @return Model of Data Model node idShare
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_IdShare_Model() {
        if (this.idShareDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "idShare");
                this.idShareDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.idShareDispatcherModel == null) {
                    this.idShareDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.idShareDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named idShare. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.idShareDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node name
     * This field should not be <code>null</code> in the database.
     * @return String value of Data Model node name
     */
    public final String getName() {
        return (String) get_Name_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node name
     * This field should not be <code>null</code> in the database.
     * @param name String value of Data Model node name
     */
    public final void setName(String name) {
        get_Name_Model().setNodeValue(name);
    }

    /**
     * Get Model of Data Model node name
     * @return Model of Data Model node name
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_Name_Model() {
        if (this.nameDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "name");
                this.nameDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.nameDispatcherModel == null) {
                    this.nameDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.nameDispatcherModel);
                }

                this.nameDispatcherModel.addInterceptor(StringLengthInterceptor.getStringLengthInterceptor(255));
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named name. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.nameDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node value
     * This field should not be <code>null</code> in the database.
     * @return java.math.BigDecimal value of Data Model node value
     */
    public final java.math.BigDecimal getValue() {
        return (java.math.BigDecimal) get_Value_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node value
     * This field should not be <code>null</code> in the database.
     * @param value java.math.BigDecimal value of Data Model node value
     */
    public final void setValue(java.math.BigDecimal value) {
        get_Value_Model().setNodeValue(value);
    }

    /**
     * Get Model of Data Model node value
     * @return Model of Data Model node value
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_Value_Model() {
        if (this.valueDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "value");
                this.valueDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.valueDispatcherModel == null) {
                    this.valueDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.valueDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named value. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.valueDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Get node value of Data Model node valueDate
     * This field should not be <code>null</code> in the database.
     * @return java.util.Date value of Data Model node valueDate
     */
    public final java.util.Date getValueDate() {
        return (java.util.Date) get_ValueDate_Model().getNodeValue();
    }

    /**
     * Set node value of Data Model node valueDate
     * This field should not be <code>null</code> in the database.
     * @param valueDate java.util.Date value of Data Model node valueDate
     */
    public final void setValueDate(java.util.Date valueDate) {
        get_ValueDate_Model().setNodeValue(valueDate);
    }

    /**
     * Get Model of Data Model node valueDate
     * @return Model of Data Model node valueDate
     */
    @SuppressWarnings("unchecked")
    @Nonnull
    public final DispatcherModel<FullShareValueItem> get_ValueDate_Model() {
        if (this.valueDateDispatcherModel == null) {
            try {
                final Model sourceModel = ModelHelper.getChildNode(this.dataModel, "valueDate");
                this.valueDateDispatcherModel = (DispatcherModel<FullShareValueItem>) sourceModel.getAttribute(ATTRIBUTE_DISPATCHER_MODEL);
                if (this.valueDateDispatcherModel == null) {
                    this.valueDateDispatcherModel = new DispatcherModel<FullShareValueItem>(this, sourceModel);
                    sourceModel.setAttribute(ATTRIBUTE_DISPATCHER_MODEL, this.valueDateDispatcherModel);
                }
            } catch (final JETException e) {
                throw new JETSystemError("FullShareValue data model does not have a child named valueDate. Should be impossible, " + "if the pojo and datamodel are up to date.", e);
            }
        }
        final DispatcherModel<FullShareValueItem> dm = this.valueDateDispatcherModel;
        assert dm != null;
        return dm;
    }

    /**
     * Check if any node not nullable is <code>null</code>
     * <ul>
     * <li><b>idPortfolio</b> can not be <code>null</code> in the database.</li>
     * <li><b>idShare</b> can not be <code>null</code> in the database.</li>
     * <li><b>name</b> can not be <code>null</code> in the database.</li>
     * <li><b>value</b> can not be <code>null</code> in the database.</li>
     * <li><b>valueDate</b> can not be <code>null</code> in the database.</li>
     * </ul>
     *
     * @return <code>true</code> if any node not nullable is <code>null</code>
     * @see JFDataItem
     */
    @Override
    public final boolean isNotNullableNull() {
        Long idPortfolio = getIdPortfolio();
        if (idPortfolio == null) {
            getLogger().logp(JETLevel.WARNING, "FullShareValueItem", "isNotNullableNull",
                "idPortfolio is null but is not nullable.");
            return true;
        }
        Long idShare = getIdShare();
        if (idShare == null) {
            getLogger().logp(JETLevel.WARNING, "FullShareValueItem", "isNotNullableNull",
                "idShare is null but is not nullable.");
            return true;
        }
        String name = getName();
        if (name == null) {
            getLogger().logp(JETLevel.WARNING, "FullShareValueItem", "isNotNullableNull",
                "name is null but is not nullable.");
            return true;
        }
        java.math.BigDecimal value = getValue();
        if (value == null) {
            getLogger().logp(JETLevel.WARNING, "FullShareValueItem", "isNotNullableNull",
                "value is null but is not nullable.");
            return true;
        }
        java.util.Date valueDate = getValueDate();
        if (valueDate == null) {
            getLogger().logp(JETLevel.WARNING, "FullShareValueItem", "isNotNullableNull",
                "valueDate is null but is not nullable.");
            return true;
        }
        return false;
    }

    /**
     * Check if this PK is the same as the PK from another FullShareValueItem
     *
     * @param other FullShareValueItem to compare with
     * @return <code>true</code> if the pk fields from the two objects have the same values
     * @see JFDataItem
     */
    @Override
    public final boolean isPkEquals(final JFDataItem other) {
        boolean result = false;
        
        if ( getIdShareValue() != null) {
            if (other instanceof FullShareValueItem) {
                final FullShareValueItem otherFullShareValue = (FullShareValueItem) other;
                if ( getIdShareValue().equals(otherFullShareValue.getIdShareValue())) {
                    result = true;
                }
            }
        }
        
        return result;
    }

}
