package jet.shareplot.ac.bo.portfolio.portfolioshare;

import java.math.BigDecimal;
import java.util.Date;

import jet.framework.util.pojo2.Interceptor;
import jet.framework.util.pojo2.InterceptorContext;
import jet.framework.util.pojo2.InterceptorValidationException;
import jet.shareplot.ac.bo.share.Share;
import jet.shareplot.ac.bo.share.ShareBOApplicationComponent;
import jet.shareplot.persistence.pojo.portfolio.PortfolioShareItem;
import jet.util.models.interfaces.Model;

/**
 * Sample bo class, extending the pojo PortfolioShareItem.
 * 
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class PortfolioShareInterceptor implements Interceptor {

    private static final long serialVersionUID = 1L;

    private boolean inValidation = false;

    private final ShareBOApplicationComponent shareAC;

    private Share linkedShare;

    public PortfolioShareInterceptor(final ShareBOApplicationComponent shareAC) {
        this.shareAC = shareAC;
    }

    @Override
    public int getPriority() {
        return 0;
    }

    /* (non-Javadoc)
     * @see jet.framework.util.pojo2.Interceptor#validate(jet.framework.util.pojo2.InterceptorContext)
     */
    @Override
    public void validate(final InterceptorContext interceptor) throws InterceptorValidationException {
        if (!this.inValidation) {
            this.inValidation = true;

            final CalculateValueContext context = getCalculateValueContext(interceptor);
            calculateValue(context);

            this.inValidation = false;
        }
    }

    private CalculateValueContext getCalculateValueContext(final InterceptorContext interceptor) {
        Share share = null;
        Date valueDate = null;
        BigDecimal quantity = null;

        final PortfolioShareItem item = (PortfolioShareItem) interceptor.getPojoItem();

        final Model node = interceptor.getNode();
        if (node == item.get_IdShare_Model()) {
            // get new Share
            final Long shareId = (Long) interceptor.getValue();
            share = getShare(shareId);
            // get old date
            valueDate = item.getValueDate();
            // get old quantity
            quantity = item.getChangeQuantity();
        } else if (node == item.get_ValueDate_Model()) {
            // get old Share
            share = getShare(item);
            // get new date
            valueDate = (Date) interceptor.getValue();
            // get old quantity
            quantity = item.getChangeQuantity();
        } else if (node == item.get_ChangeQuantity_Model()) {
            // get old Share
            share = getShare(item);
            // get old date
            valueDate = item.getValueDate();
            // get new quantity
            quantity = (BigDecimal) interceptor.getValue();
        }

        return new CalculateValueContext(item, share, valueDate, quantity);
    }

    private void calculateValue(final CalculateValueContext parameterObject) {
        BigDecimal totalValue = null;
        String shareName = null;

        if (parameterObject.share != null) {
            shareName = parameterObject.share.getName();

            final BigDecimal shareValue = parameterObject.share.getValueAtDate(parameterObject.valueDate);

            if (shareValue != null && parameterObject.quantity != null) {
                totalValue = shareValue.multiply(parameterObject.quantity);
            }
        }

        parameterObject.portfolioShareItem.setShareName(shareName);
        parameterObject.portfolioShareItem.setValue(totalValue);
    }

    private Share getShare(final PortfolioShareItem item) {
        if (this.linkedShare == null) {
            final Long shareId = item.getIdShare();
            if (shareId != null) {
                this.linkedShare = this.shareAC.getShare(shareId);
            }
        }
        return this.linkedShare;
    }

    private Share getShare(final Long shareId) {
        Share share = null;
        if (shareId != null) {
            share = this.shareAC.getShare(shareId);
        }
        this.linkedShare = share;
        return share;
    }
}
