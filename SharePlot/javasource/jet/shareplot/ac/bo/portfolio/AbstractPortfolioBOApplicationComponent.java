package jet.shareplot.ac.bo.portfolio;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

import javax.ejb.ObjectNotFoundException;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.transaction.RollbackException;
import javax.transaction.TransactionManager;

import jet.container.managers.jta.interfaces.JTAManagerContext;
import jet.framework.component.SimpleApplicationComponent;
import jet.framework.manager.datamodel.interfaces.ModelArray;
import jet.framework.nuts.select.FinderMethod;
import jet.framework.nuts.select.SelectNut;
import jet.framework.nuts.select.SelectNutHelper;
import jet.framework.util.JetConstants;
import jet.framework.util.jta.TransactionHelper;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.finder.portfolio.Portfolio_FindAll0;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 * Portfolio manipulation API.
 *
 * Generated by JetTools, do not change this file, it will be overriden at each generation.
 *
 * @author JetToolsFramework
 */
abstract class AbstractPortfolioBOApplicationComponent extends SimpleApplicationComponent {

    private static final long serialVersionUID = 993423458L;

    private TransactionManager transactionManager;

    /**
     * Get an instance of the POJO2 business object for the data model.
     *
     * @param model Data model
     * @return instance of the POJO2 business object
     */
    @NonNull
    protected abstract Portfolio getPortfolio(@NonNull final Model model);

    /**
     * Return all portfolio matching the FinderMethod.
     *
     * @param finder FinderMethod to use to fetch the Portfolios
     * @return a list of portfolio matching the FinderMethod.
     * @see List
     * @see Portfolio
     */
    @NonNull
    protected List<Portfolio> getPortfolios(@NonNull final FinderMethod finder) {
        final List<Portfolio> result = new ArrayList<Portfolio>();
        final SelectNut selectNut = getSelectNut(SelectStoreApplicationComponent.PORTFOLIO_SELECT);

        final Callable<@Nullable Object> callable = new Callable<@Nullable Object>() {
            @Override
            public Object call() throws Exception {
                final ModelArray ma = SelectNutHelper.getModelArray(selectNut, finder, getLogger());
                if (ma != null) {
                    final int size = ma.getSize();
                    for (int i = 0; i < size; i++) {
                        final Model model = ma.get(i);
                        assert model != null;
                        final Portfolio portfolio = getPortfolio(model);
                        result.add(portfolio);
                    }
                }
                return null;
            }
        };
        try {
            final TransactionManager transactionMgr = getTransactionManager();
            TransactionHelper.runTransaction(callable, transactionMgr);
        } catch (final ObjectNotFoundException e) {
            logp(JETLevel.SEVERE, "AbstractPortfolioBOApplicationComponent", "getPortfolios", e.getMessage(), e);
        } catch (final JETException e) {
            logp(JETLevel.SEVERE, "AbstractPortfolioBOApplicationComponent", "getPortfolios", e.getMessage(), e);
        } catch (final RollbackException e) {
            logp(JETLevel.SEVERE, "AbstractPortfolioBOApplicationComponent", "getPortfolios", e.getMessage(), e);
        } catch (final NamingException e) {
            logp(JETLevel.SEVERE, "AbstractPortfolioBOApplicationComponent", "getPortfolios", e.getMessage(), e);
        }

        return result;
    }

    private TransactionManager getTransactionManager() throws NamingException {
        if (this.transactionManager == null) {
            final JTAManagerContext jtaCtxt = (JTAManagerContext) new InitialContext().lookup(JetConstants.MANAGERS_CONTEXT + JTAManagerContext.NAME);
            this.transactionManager = jtaCtxt.getTransactionManager();
        }
        return this.transactionManager;
    }

    /**
     * Return the first portfolio matching the FinderMethod.
     *
     * @param finder FinderMethod to use to fetch the Portfolio
     * @return the portfolio matching the FinderMethod.
     * @see Portfolio
     */
    @Nullable
    protected Portfolio getPortfolio(@NonNull final FinderMethod finder) {
        final Portfolio result;

        final SelectNut selectNut = getSelectNut(SelectStoreApplicationComponent.PORTFOLIO_SELECT);
        final Model model = SelectNutHelper.getModel(selectNut, finder, getLogger());
        if (model == null) {
            result = null;
        } else {
            result = getPortfolio(model);
        }

        return result;
    }

    /**
     * Sample method making a call to getPortfolios(final FinderMethod finder).
     *
     * @return a list of portfolio matching the FinderMethod.
     * @see List
     * @see Portfolio
     * @see #getPortfolios(FinderMethod finder)
     */
    @NonNull
    public List<Portfolio> getPortfolios() {
        final Portfolio_FindAll0 finder = new Portfolio_FindAll0();

        return getPortfolios(finder);
    }
}
