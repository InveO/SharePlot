package jet.shareplot.ac.bo.sharequantity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import jet.container.managers.application.interfaces.ApplicationProxy;
import jet.container.managers.session.interfaces.Session;
import jet.framework.nuts.desktop.JetDesktop;
import jet.framework.nuts.select.FinderMethod;
import jet.lifecycle.annotations.Deinitializer;
import jet.lifecycle.interfaces.LifeCycleState;
import jet.shareplot.persistence.finder.sharequantity.ShareQuantity_FindByPortfolio1;
import jet.shareplot.persistence.finder.sharequantity.ShareQuantity_FindByPrimaryKey1;
import jet.shareplot.persistence.finder.sharequantity.ShareQuantity_FindByShareAndPortfolio2;
import jet.util.SerializableKey;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * ShareQuantity manipulation API.
 * 
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareQuantityBOApplicationComponent extends AbstractShareQuantityBOApplicationComponent {

    private static final long serialVersionUID = 1077646545L;
    /**
     * <code>NAME</code> of this application component, so it can be retrieved easily.
     */
    private static final String NAME = "ShareQuantityBOApplicationComponent";
    /**
     * <code>SESSION_KEY</code> session key.
     */
    private static final Object SESSION_KEY = new SerializableKey(ShareQuantityBOApplicationComponent.class, "SESSION_KEY");

    /**
     * Get the instance of the ShareQuantityBOApplicationComponent linked to the session. If there
     * is not already one it will be created.
     * 
     * @param session current session
     * @return ShareQuantityBOApplicationComponent
     * @throws JETException if there is an error initializing the ApplicationComponent
     */
    @Nonnull
    public static final ShareQuantityBOApplicationComponent getInstance(final Session session) throws JETException {
        ShareQuantityBOApplicationComponent shareQuantityAC = (ShareQuantityBOApplicationComponent) session.getProperty(SESSION_KEY);

        if (shareQuantityAC != null) {
            // system to bypass the test in junit tests, can not be exploited outside junit mocking mechanism
            final Object junitKey = session.getProperty(new Object());
            if (junitKey == null) {
                final LifeCycleState lcs = shareQuantityAC.getInitializableSupport().getLifeCycleState();
                if (lcs == LifeCycleState.UNINITIALIZED) {
                    session.removeProperty(SESSION_KEY);
                    shareQuantityAC = null;
                }
            }
        }

        if (shareQuantityAC == null) {
            final JetDesktop desktopNut = (JetDesktop) session.getProperty(JetDesktop.SESSION_KEY_DESKTOP);
            if (desktopNut == null) {
                throw new JETException("Can only be used with an JetDesktop for the desktop.");
            }

            final ApplicationProxy appProxy = desktopNut.getApplicationProxy();
            if (appProxy.hasApplicationComponent(NAME)) {
                try {
                    final Map<String, Object> initMap = new HashMap<String, Object>();
                    shareQuantityAC = (ShareQuantityBOApplicationComponent) appProxy.createApplicationComponent(NAME, desktopNut.getApplicationComponent(), initMap);
                    desktopNut.registerChildApplicationComponent(shareQuantityAC);
                    session.setProperty(SESSION_KEY, shareQuantityAC);
                } catch (final JETException e) {
                    desktopNut.logp(JETLevel.SEVERE, NAME, "getInstance", e.getMessage(), e);
                    throw new JETException("Could not instantiate the ShareQuantityBOApplicationComponent.", e);
                }
            } else {
                desktopNut.logp(JETLevel.INFO, NAME, "getInstance", "NO APPLICATION COMPONENT FOUND FOR : " + NAME);
                throw new JETException("NO APPLICATION COMPONENT FOUND FOR : " + NAME);
            }
        }

        return shareQuantityAC;
    }

    /**
     * Deinit, internal use only.
     * 
     * @throws JETException if there is an error deinitializing the ApplicationComponent
     */
    @Deinitializer
    public final void doShareQuantityACDeinit() throws JETException {
        getSession().removeProperty(SESSION_KEY);
    }

    @Override
    @Nonnull
    protected ShareQuantity getShareQuantity(@Nonnull final Model model) {
        return new ShareQuantity(model, this);
    }

    /**
     * Get all quantities for a given share.
     * 
     * @param idPortfolio Portfolio for which the quantities are desired
     * @param idShare Share for which the quantities are desired
     * @return a list of shareQuantity matching the query.
     * @see List
     * @see ShareQuantity
     * @see #getShareQuantitys(FinderMethod finder)
     */
    public List<ShareQuantity> getShareQuantitys(@Nonnull final Long idPortfolio, @Nonnull final Long idShare) {
        final ShareQuantity_FindByShareAndPortfolio2 finder = new ShareQuantity_FindByShareAndPortfolio2();
        finder.setIdPortfolio(idPortfolio);
        finder.setIdShare(idShare);

        return getShareQuantitys(finder);
    }

    /**
     * Get all quantities for a given portfolio.
     * 
     * @param idPortfolio
     * @return list of quantities.
     */
    @Nonnull
    public final List<ShareQuantity> getPortfolioShareQuantitys(@Nullable final Long idPortfolio) {
        List<ShareQuantity> result = new ArrayList<>();

        if (idPortfolio != null) {
            final ShareQuantity_FindByPortfolio1 finder = new ShareQuantity_FindByPortfolio1();
            finder.setIdPortfolio(idPortfolio);
            result = getShareQuantitys(finder);
        }
        return result;
    }

    /**
     * Get ShareQuantity by primary key.
     * 
     * @param idShareQuantity
     * @return ShareQuantity
     */
    @Nullable
    public final ShareQuantity getShareQuantity(@Nonnull final Long idShareQuantity) {
        final ShareQuantity_FindByPrimaryKey1 finder = new ShareQuantity_FindByPrimaryKey1();
        finder.setIdShareQuantity(idShareQuantity);
        return getShareQuantity(finder);
    }
}
