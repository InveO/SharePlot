package jet.shareplot.ac.bo.sharequantity;

import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.nuts.store.StoreNut;
import jet.framework.util.exception.FormatedJetException;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Sample bo class, extending the pojo ShareQuantityItem.
 * 
 * Generated by JetTools, you can edit this file directly, Once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareQuantity extends ShareQuantityItem {

    private static final String CAN_NOT_SAVE_KEY = "SharePlot/properties/task/Share/dialog.CanNotSaveShareQuantity";
    private static final String CAN_NOT_DELETE_KEY = "SharePlot/properties/task/Share/dialog.CanNotDeleteShareQuantity";
    private static final String NOT_VALID_KEY = "SharePlot/properties/task/Share/dialog.ShareQuantityNotValid";

    private final ShareQuantityApplicationComponent shareQuantityAC;

    public ShareQuantity(final ShareQuantityApplicationComponent shareQuantityAC) {
        super();
        this.shareQuantityAC = shareQuantityAC;
    }

    public ShareQuantity(final Model model, final ShareQuantityApplicationComponent shareQuantityAC) {
        super(model);
        this.shareQuantityAC = shareQuantityAC;
    }

    public ShareQuantity(final ShareQuantity shareQuantity) {
        super(shareQuantity);
        this.shareQuantityAC = shareQuantity.shareQuantityAC;
    }

    public boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    private boolean isNew() {
        return getIdShareQuantity() == null;
    }

    public void save() throws FormatedJetException {
        if (isValid()) {
            final StoreNut storeNut = this.shareQuantityAC.getStoreNut(SelectStoreApplicationComponent.PORTFOLIO_STORE);
            try {
                if (isNew()) {
                    storeNut.createDataModel(get_Model());
                } else {
                    storeNut.updateDataModel(get_Model());
                }
            } catch (final FinderObjectNotFoundException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "save", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            } catch (final JETException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "save", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            }
        } else {
            final Object[] args = { getValueDate() };
            throw new FormatedJetException(null, NOT_VALID_KEY, args, null);
        }
    }

    public void delete() throws FormatedJetException {
        if (!isNew()) {
            final StoreNut storeNut = this.shareQuantityAC.getStoreNut(SelectStoreApplicationComponent.PORTFOLIO_STORE);
            try {
                storeNut.removeDataModel(get_Model());
            } catch (final FinderObjectNotFoundException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "delete", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            } catch (final JETException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "delete", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            }
        }
    }

}
