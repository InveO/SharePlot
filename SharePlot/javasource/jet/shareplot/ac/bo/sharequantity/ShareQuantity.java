package jet.shareplot.ac.bo.sharequantity;

import jet.framework.util.exception.FormatedJetException;
import jet.framework.util.pojo2.AbstractResourceNotification.NOTIFICATION_TYPE;
import jet.framework.util.pojo2.JFBusinessCallableHelper;
import jet.framework.util.pojo2.JFBusinessDeleteCallable;
import jet.framework.util.pojo2.JFBusinessErrorHelper;
import jet.framework.util.pojo2.JFBusinessItem;
import jet.framework.util.pojo2.JFBusinessSaveCallable;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.util.models.interfaces.Model;

/**
 * Sample bo class, extending the pojo ShareQuantityItem.
 *
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 *
 * @author JetToolsFramework
 */
public class ShareQuantity extends ShareQuantityItem implements JFBusinessItem, JFBusinessErrorHelper {

    private static final long serialVersionUID = 1077646545L;

    // TODO set localized keys for error dialogs
    private static final String CAN_NOT_SAVE_KEY = "";
    private static final String CAN_NOT_DELETE_KEY = "";
    private static final String NOT_VALID_KEY = "";

    private final AbstractShareQuantityApplicationComponent shareQuantityAC;

    /**
     * Constructor, build an empty shareQuantity
     *
     * @param shareQuantityAC the shareQuantity application component
     *
     * @see Model
     * @see ShareQuantityApplicationComponent
     */
    public ShareQuantity(final AbstractShareQuantityApplicationComponent shareQuantityAC) {
        super();
        this.shareQuantityAC = shareQuantityAC;
    }

    /**
     * Constructor, build a shareQuantity from a Model
     *
     * @param model the model representing a shareQuantity entry in the table ShareQuantity
     * @param shareQuantityAC the shareQuantity application component
     *
     * @see Model
     * @see ShareQuantityApplicationComponent
     */
    public ShareQuantity(final Model model, final AbstractShareQuantityApplicationComponent shareQuantityAC) {
        super(model);
        this.shareQuantityAC = shareQuantityAC;
    }

    /**
     * Copy constructor, build a shareQuantity as a copy of another shareQuantity
     *
     * @param shareQuantity the shareQuantity to copy
     */
    public ShareQuantity(final ShareQuantity shareQuantity) {
        super(shareQuantity);
        this.shareQuantityAC = shareQuantity.shareQuantityAC;
    }

    /**
     * @return <code>true</code> if this shareQuantity is valid and can be saved.
     * @see JFBusinessItem
     */
    @Override
    public final boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    /**
     * @return <code>true</code> if this shareQuantity is new.
     * @see JFBusinessItem
     */
    @Override
    public final boolean isNew() {
        // TODO implement this method
        return false;
    }

    /**
     * Register the object in the database.
     * The store will only be done if the shareQuantity is valid.
     * It will updated if it already exists and create it if not.
     *
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     * @see #isValid()
     * @see JFBusinessItem
     */
    @Override
    public final void save() throws FormatedJetException {
        if (isValid()) {
            final ShareQuantityResource resource;
            if (isNew()) {
                resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.CREATE);
            } else {
                resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.UPDATE);
            }

            final JFBusinessSaveCallable callable = new JFBusinessSaveCallable(this.shareQuantityAC, SelectStoreApplicationComponent.SHAREQUANTITY_STORE, this);
            JFBusinessCallableHelper.storeChange(this.shareQuantityAC, callable, CAN_NOT_SAVE_KEY, this);

            resource.notifyResource();
        } else {
            throw getFormatedJetException(NOT_VALID_KEY, null);
        }
    }

    /**
     * Remove the object from the database.
     * It will be deleted if it already exists.
     *
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     * @see JFBusinessItem
     */
    @Override
    public final void delete() throws FormatedJetException {
        if (!isNew()) {
            final JFBusinessDeleteCallable callable = new JFBusinessDeleteCallable(this.shareQuantityAC, SelectStoreApplicationComponent.SHAREQUANTITY_STORE, this);
            JFBusinessCallableHelper.storeChange(this.shareQuantityAC, callable, CAN_NOT_DELETE_KEY, this);

            final ShareQuantityResource resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.DELETE);
            resource.notifyResource();
        }
    }

    /**
     * Produce error for save / delete
     *
     * @return FormatedJetException
     * @see FormatedJetException
     * @see JFBusinessErrorHelper
     * @see #save()
     * @see #delete()
     */
    @Override
    public FormatedJetException getFormatedJetException(final String key, final Exception e) {
        final Object[] args = {};
        return new FormatedJetException(null, key, args, e);
    }

}
