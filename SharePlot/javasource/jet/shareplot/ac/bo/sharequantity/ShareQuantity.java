package jet.shareplot.ac.bo.sharequantity;

import jet.framework.component.resource.ResourceNotificationApplicationComponent;
import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.nuts.store.StoreNut;
import jet.framework.util.exception.FormatedJetException;
import jet.framework.util.pojo2.AbstractResourceNotification;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.shareplot.ui.desktop.pojo2.SharePlotErrorHandler;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Sample bo class, extending the pojo ShareQuantityItem.
 * 
 * Generated by JetTools, you can edit this file directly, Once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareQuantity extends ShareQuantityItem {

    private static final long serialVersionUID = -6023493960063592803L;

    public enum ChangeType {
        PURCHASE("P", "SharePlot/properties/task/Share/changeType.Purchase"), SALE("S", "SharePlot/properties/task/Share/changeType.Sale"), FEE("F", "SharePlot/properties/task/Share/changeType.Fee");

        private final String code;
        private String localized;

        ChangeType(final String code, final String localized) {
            this.code = code;
            this.localized = localized;
        }

        public String getCode() {
            return this.code;
        }

        public String getLocalized() {
            return this.localized;
        }

        public void setLocalized(final String localized) {
            this.localized = localized;
        }

    }

//    public static final String CHANGE_TYPE_PURCHASE = "P";
//    public static final String CHANGE_TYPE_SALE = "S";
//    public static final String CHANGE_TYPE_FEE = "F";

    private static final String CAN_NOT_SAVE_KEY = "SharePlot/properties/task/Share/dialog.CanNotSaveShareQuantity";
    private static final String CAN_NOT_DELETE_KEY = "SharePlot/properties/task/Share/dialog.CanNotDeleteShareQuantity";
    private static final String NOT_VALID_KEY = "SharePlot/properties/task/Share/dialog.ShareQuantityNotValid";

    private final ShareQuantityApplicationComponent shareQuantityAC;

    /**
     * Constructor, build an empty shareQuantity
     * 
     * @param shareQuantityAC the shareQuantity application component
     * 
     * @see Model
     * @see ShareQuantityApplicationComponent
     */
    public ShareQuantity(final ShareQuantityApplicationComponent shareQuantityAC) {
        super();
        this.shareQuantityAC = shareQuantityAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareQuantityAC.getSession()));
    }

    /**
     * Constructor, build a shareQuantity from a Model
     * 
     * @param model the model representing a shareQuantity entry in the table ShareQuantity
     * @param shareQuantityAC the shareQuantity application component
     * 
     * @see Model
     * @see ShareQuantityApplicationComponent
     */
    public ShareQuantity(final Model model, final ShareQuantityApplicationComponent shareQuantityAC) {
        super(model);
        this.shareQuantityAC = shareQuantityAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareQuantityAC.getSession()));
    }

    /**
     * Copy constructor, build a shareQuantity as a copy of another shareQuantity
     * 
     * @param shareQuantity the shareQuantity to copy
     */
    public ShareQuantity(final ShareQuantity shareQuantity) {
        super(shareQuantity);
        this.shareQuantityAC = shareQuantity.shareQuantityAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareQuantityAC.getSession()));
    }

    /**
     * @return <code>true</code> if this shareQuantity is valid and can be saved.
     */
    public boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    /**
     * @return <code>true</code> if this shareQuantity is new.
     */
    public boolean isNew() {
        return getIdShareQuantity() == null;
    }

    /**
     * Register the object in the database.
     * The store will only be done if the shareQuantity is valid.
     * It will updated if it already exists and create it if not.
     * 
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     * @see #isValid()
     */
    public void save() throws FormatedJetException {
        if (isValid()) {
            final StoreNut storeNut = this.shareQuantityAC.getStoreNut(SelectStoreApplicationComponent.SHAREQUANTITY_STORE);
            try {
                ShareQuantityResource resource;
                if (isNew()) {
                    storeNut.createDataModel(get_Model());
                    resource = new ShareQuantityResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.CREATE);
                } else {
                    storeNut.updateDataModel(get_Model());
                    resource = new ShareQuantityResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.UPDATE);
                }
                final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareQuantityAC.getSession());
                resourceAC.notifyListeners(ShareQuantityResource.RESOURCE_NAME, resource);
            } catch (final FinderObjectNotFoundException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "save", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            } catch (final JETException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "save", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            }
        } else {
            final Object[] args = { getValueDate() };
            throw new FormatedJetException(null, NOT_VALID_KEY, args, null);
        }
    }

    /**
     * Remove the object from the database.
     * It will be deleted if it already exists.
     * 
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     */
    public void delete() throws FormatedJetException {
        if (!isNew()) {
            final StoreNut storeNut = this.shareQuantityAC.getStoreNut(SelectStoreApplicationComponent.SHAREQUANTITY_STORE);
            try {
                final ShareQuantityResource resource = new ShareQuantityResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.DELETE);
                storeNut.removeDataModel(get_Model());
                final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareQuantityAC.getSession());
                resourceAC.notifyListeners(ShareQuantityResource.RESOURCE_NAME, resource);
            } catch (final FinderObjectNotFoundException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "delete", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            } catch (final JETException e) {
                this.shareQuantityAC.logp(JETLevel.SEVERE, "ShareQuantity", "delete", e.getMessage(), e);
                final Object[] args = { getValueDate() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            }
        }
    }

}
