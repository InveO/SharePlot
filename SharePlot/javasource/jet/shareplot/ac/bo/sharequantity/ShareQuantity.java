package jet.shareplot.ac.bo.sharequantity;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import jet.framework.util.exception.FormatedJetException;
import jet.framework.util.pojo2.AbstractResourceNotification.NOTIFICATION_TYPE;
import jet.framework.util.pojo2.JFBusinessCallableHelper;
import jet.framework.util.pojo2.JFBusinessDeleteCallable;
import jet.framework.util.pojo2.JFBusinessErrorHelper;
import jet.framework.util.pojo2.JFBusinessItem;
import jet.framework.util.pojo2.JFBusinessSaveCallable;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareQuantityItem;
import jet.util.models.interfaces.Model;

/**
 * Sample bo class, extending the pojo ShareQuantityItem.
 * 
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareQuantity extends ShareQuantityItem implements JFBusinessItem, JFBusinessErrorHelper {

    private static final long serialVersionUID = 1077646545L;

    public enum ChangeType {
        PURCHASE("P", "SharePlot/properties/task/Share/changeType.Purchase"), SALE("S", "SharePlot/properties/task/Share/changeType.Sale"), FEE("F", "SharePlot/properties/task/Share/changeType.Fee");

        private final String code;
        private String localized;

        ChangeType(final String code, final String localized) {
            this.code = code;
            this.localized = localized;
        }

        public String getCode() {
            return this.code;
        }

        public String getLocalized() {
            return this.localized;
        }

        public void setLocalized(final String localized) {
            this.localized = localized;
        }

    }

    private static final String CAN_NOT_SAVE_KEY = "SharePlot/properties/task/Share/dialog.CanNotSaveShareQuantity";
    private static final String CAN_NOT_DELETE_KEY = "SharePlot/properties/task/Share/dialog.CanNotDeleteShareQuantity";
    private static final String NOT_VALID_KEY = "SharePlot/properties/task/Share/dialog.ShareQuantityNotValid";

    private final AbstractShareQuantityBOApplicationComponent shareQuantityAC;

    /**
     * Constructor, build an empty shareQuantity.
     * 
     * @param shareQuantityAC the shareQuantity application component
     * 
     * @see Model
     * @see ShareQuantityBOApplicationComponent
     */
    public ShareQuantity(@Nonnull final AbstractShareQuantityBOApplicationComponent shareQuantityAC) {
        super();
        this.shareQuantityAC = shareQuantityAC;
    }

    /**
     * Constructor, build a shareQuantity from a Model.
     * 
     * @param model the model representing a shareQuantity entry in the table ShareQuantity
     * @param shareQuantityAC the shareQuantity application component
     * 
     * @see Model
     * @see ShareQuantityBOApplicationComponent
     */
    public ShareQuantity(@Nonnull final Model model, @Nonnull final AbstractShareQuantityBOApplicationComponent shareQuantityAC) {
        super(model);
        this.shareQuantityAC = shareQuantityAC;
    }

    /**
     * Copy constructor, build a shareQuantity as a copy of another shareQuantity.
     * 
     * @param shareQuantity the shareQuantity to copy
     */
    public ShareQuantity(@Nonnull final ShareQuantity shareQuantity) {
        super(shareQuantity);
        this.shareQuantityAC = shareQuantity.shareQuantityAC;
    }

    @Override
    public final boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    @Override
    public final void save() throws FormatedJetException {
        if (isValid()) {
            final ShareQuantityResource resource;
            if (isNew()) {
                resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.CREATE);
            } else {
                resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.UPDATE);
            }

            final JFBusinessSaveCallable callable = new JFBusinessSaveCallable(this.shareQuantityAC, SelectStoreApplicationComponent.SHAREQUANTITY_STORE, this);
            JFBusinessCallableHelper.storeChange(this.shareQuantityAC, callable, CAN_NOT_SAVE_KEY, this);

            resource.notifyResource();
        } else {
            throw getFormatedJetException(NOT_VALID_KEY, null);
        }
    }

    @Override
    public final void delete() throws FormatedJetException {
        if (!isNew()) {
            final JFBusinessDeleteCallable callable = new JFBusinessDeleteCallable(this.shareQuantityAC, SelectStoreApplicationComponent.SHAREQUANTITY_STORE, this);
            JFBusinessCallableHelper.storeChange(this.shareQuantityAC, callable, CAN_NOT_DELETE_KEY, this);

            final ShareQuantityResource resource = new ShareQuantityResource(this.shareQuantityAC, this, NOTIFICATION_TYPE.DELETE);
            resource.notifyResource();
        }
    }

    @Override
    public final FormatedJetException getFormatedJetException(@Nullable final String key, @Nullable final Exception e) {
        final Object[] args = { getValueDate() };
        return new FormatedJetException(null, key, args, e);
    }
}
