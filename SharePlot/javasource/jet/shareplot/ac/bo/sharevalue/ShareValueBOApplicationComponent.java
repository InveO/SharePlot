package jet.shareplot.ac.bo.sharevalue;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

import jet.container.managers.application.interfaces.ApplicationProxy;
import jet.container.managers.session.interfaces.Session;
import jet.framework.nuts.desktop.JetDesktop;
import jet.framework.nuts.select.FinderMethod;
import jet.lifecycle.annotations.Deinitializer;
import jet.lifecycle.interfaces.LifeCycleState;
import jet.shareplot.ac.bo.share.Share;
import jet.shareplot.persistence.finder.sharevalue.ShareValue_FindByShare1;
import jet.shareplot.persistence.finder.sharevalue.ShareValue_FindByShareAndDate2;
import jet.util.SerializableKey;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * ShareValue manipulation API.
 * 
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareValueBOApplicationComponent extends AbstractShareValueBOApplicationComponent {

    private static final long serialVersionUID = 1303211696L;
    /**
     * <code>NAME</code> of this application component, so it can be retrieved easily.
     */
    private static final String NAME = "ShareValueBOApplicationComponent";
    /**
     * <code>SESSION_KEY</code> session key.
     */
    private static final Object SESSION_KEY = new SerializableKey(ShareValueBOApplicationComponent.class, "SESSION_KEY");

    /**
     * Get the instance of the ShareValueBOApplicationComponent linked to the session. If there
     * is not already one it will be created.
     * 
     * @param session current session
     * @return ShareValueBOApplicationComponent
     * @throws JETException if there is an error initializing the ApplicationComponent
     */
    @NonNull
    public static final ShareValueBOApplicationComponent getInstance(final Session session) throws JETException {
        ShareValueBOApplicationComponent shareValueAC = (ShareValueBOApplicationComponent) session.getProperty(SESSION_KEY);

        if (shareValueAC != null) {
            // system to bypass the test in junit tests, can not be exploited outside junit mocking mechanism
            final Object junitKey = session.getProperty(new Object());
            if (junitKey == null) {
                final LifeCycleState lcs = shareValueAC.getInitializableSupport().getLifeCycleState();
                if (lcs == LifeCycleState.UNINITIALIZED) {
                    session.removeProperty(SESSION_KEY);
                    shareValueAC = null;
                }
            }
        }

        if (shareValueAC == null) {
            final JetDesktop desktopNut = (JetDesktop) session.getProperty(JetDesktop.SESSION_KEY_DESKTOP);
            if (desktopNut == null) {
                throw new JETException("Can only be used with an JetDesktop for the desktop.");
            }

            final ApplicationProxy appProxy = desktopNut.getApplicationProxy();
            if (appProxy.hasApplicationComponent(NAME)) {
                try {
                    final Map<String, Object> initMap = new HashMap<String, Object>();
                    shareValueAC = (ShareValueBOApplicationComponent) appProxy.createApplicationComponent(NAME, desktopNut.getApplicationComponent(), initMap);
                    desktopNut.registerChildApplicationComponent(shareValueAC);
                    session.setProperty(SESSION_KEY, shareValueAC);
                } catch (final JETException e) {
                    desktopNut.logp(JETLevel.SEVERE, NAME, "getInstance", e.getMessage(), e);
                    throw new JETException("Could not instantiate the ShareValueBOApplicationComponent.", e);
                }
            } else {
                desktopNut.logp(JETLevel.INFO, NAME, "getInstance", "NO APPLICATION COMPONENT FOUND FOR : " + NAME);
                throw new JETException("NO APPLICATION COMPONENT FOUND FOR : " + NAME);
            }
        }

        return shareValueAC;
    }

    /**
     * Deinit, internal use only.
     * 
     * @throws JETException if there is an error deinitializing the ApplicationComponent
     */
    @Deinitializer
    public final void doShareValueACDeinit() throws JETException {
        getSession().removeProperty(SESSION_KEY);
    }

    @Override
    @NonNull
    protected ShareValue getShareValue(@NonNull final Model model) {
        return new ShareValue(model, this);
    }

    /**
     * Sample method making a call to getShareValues(final FinderMethod finder).
     * 
     * @param share Share for which the values are desired
     * 
     * @return a list of shareValue matching the FinderMethod.
     * @see List
     * @see ShareValue
     * @see #getShareValues(FinderMethod finder)
     */
    @NonNull
    public List<ShareValue> getShareValues(final Share share) {
        final ShareValue_FindByShare1 finder = new ShareValue_FindByShare1();
        finder.setIdShare(share.getIdShare());

        return getShareValues(finder);
    }

    /**
     * Get the value of the share at a given date. <code>null</code> if there is no value defined at
     * the given date (or at a previous date).
     * 
     * @param share Shared for which the value is to be fetched
     * @param valueDate Date at which the value is desired.
     * @return Value at the date or the nearest previous date.
     */
    @Nullable
    public final ShareValue getValueAtDate(@NonNull final Share share, @NonNull final Date valueDate) {
        final ShareValue_FindByShareAndDate2 finder = new ShareValue_FindByShareAndDate2();
        finder.setIdShare(share.getIdShare());
        finder.setValueDate(valueDate);
        return getShareValue(finder);
    }

}
