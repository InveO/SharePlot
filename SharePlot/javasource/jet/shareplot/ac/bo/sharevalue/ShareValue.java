package jet.shareplot.ac.bo.sharevalue;

import jet.framework.component.resource.ResourceNotificationApplicationComponent;
import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.nuts.store.StoreNut;
import jet.framework.util.exception.FormatedJetException;
import jet.framework.util.pojo2.AbstractResourceNotification;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareValueItem;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Sample bo class, extending the pojo ShareValueItem.
 *
 * Generated by JetTools, you can edit this file directly, once created it will not be overwritten
 *
 * @author JetToolsFramework
 */
public class ShareValue extends ShareValueItem {

    private static final long serialVersionUID = 1461049825L;

    // TODO set localized keys for error dialogs
    private static final String CAN_NOT_SAVE_KEY = "";
    private static final String CAN_NOT_DELETE_KEY = "";
    private static final String NOT_VALID_KEY = "";

    private final ShareValueApplicationComponent shareValueAC;

    /**
     * Constructor, build an empty shareValue
     *
     * @param shareValueAC the shareValue application component
     *
     * @see Model
     * @see ShareValueApplicationComponent
     */
    public ShareValue(final ShareValueApplicationComponent shareValueAC) {
        super();
        this.shareValueAC = shareValueAC;
    }

    /**
     * Constructor, build a shareValue from a Model
     *
     * @param model the model representing a shareValue entry in the table ShareValue
     * @param shareValueAC the shareValue application component
     *
     * @see Model
     * @see ShareValueApplicationComponent
     */
    public ShareValue(final Model model, final ShareValueApplicationComponent shareValueAC) {
        super(model);
        this.shareValueAC = shareValueAC;
    }

    /**
     * Copy constructor, build a shareValue as a copy of another shareValue
     *
     * @param shareValue the shareValue to copy
     */
    public ShareValue(final ShareValue shareValue) {
        super(shareValue);
        this.shareValueAC = shareValue.shareValueAC;
    }

    /**
     * @return <code>true</code> if this shareValue is valid and can be saved.
     */
    public final boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    /**
     * @return <code>true</code> if this shareValue is new.
     */
    public final boolean isNew() {
        // TODO implement this method
        return false;
    }

    /**
     * Register the object in the database.
     * The store will only be done if the shareValue is valid.
     * It will updated if it already exists and create it if not.
     *
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     * @see #isValid()
     */
     public final void save() throws FormatedJetException {
        if (isValid()) {
            final StoreNut storeNut = this.shareValueAC.getStoreNut(SelectStoreApplicationComponent.SHAREVALUE_STORE);
            try {
                ShareValueResource resource;
                if (isNew()) {
                    storeNut.createDataModel(get_Model());
					resource = new ShareValueResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.CREATE);
                } else {
                    storeNut.updateDataModel(get_Model());
					resource = new ShareValueResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.UPDATE);
                }
				final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareValueAC.getSession());
                resourceAC.notifyListeners(ShareValueResource.RESOURCE_NAME, resource);
            } catch (final FinderObjectNotFoundException e) {
                this.shareValueAC.logp(JETLevel.SEVERE, "ShareValue", "save", e.getMessage(), e);
                // TODO fill in args
                final Object[] args = { };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            } catch (final JETException e) {
                this.shareValueAC.logp(JETLevel.SEVERE, "ShareValue", "save", e.getMessage(), e);
                // TODO fill in args
                final Object[] args = { };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            }
        } else {
            // TODO fill in args
            final Object[] args = { };
            throw new FormatedJetException(null, NOT_VALID_KEY, args, null);
        }
    }

    /**
     * Remove the object from the database.
     * It will be deleted if it already exists.
     *
     * @throws FormatedJetException
     * @see FormatedJetException
     * @see #isNew()
     */
    public final void delete() throws FormatedJetException {
        if (!isNew()) {
            final StoreNut storeNut = this.shareValueAC.getStoreNut(SelectStoreApplicationComponent.SHAREVALUE_STORE);
            try {
                final ShareValueResource resource = new ShareValueResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.DELETE);
                storeNut.removeDataModel(get_Model());
                final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareValueAC.getSession());
                resourceAC.notifyListeners(ShareValueResource.RESOURCE_NAME, resource);
            } catch (final FinderObjectNotFoundException e) {
                this.shareValueAC.logp(JETLevel.SEVERE, "ShareValue", "delete", e.getMessage(), e);
                // TODO fill in args
                final Object[] args = { };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            } catch (final JETException e) {
                this.shareValueAC.logp(JETLevel.SEVERE, "ShareValue", "delete", e.getMessage(), e);
                // TODO fill in args
                final Object[] args = { };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            }
        }
    }

}
