package jet.shareplot.ac.bo.share;

import jet.framework.component.resource.ResourceNotificationApplicationComponent;
import jet.framework.manager.datamodel.interfaces.FinderObjectNotFoundException;
import jet.framework.nuts.store.StoreNut;
import jet.framework.util.exception.FormatedJetException;
import jet.framework.util.pojo2.AbstractResourceNotification;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.persistence.pojo.ShareItem;
import jet.shareplot.ui.desktop.pojo2.SharePlotErrorHandler;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Sample bo class, extending the pojo ShareItem.
 * 
 * Generated by JetTools, you can edit this file directly, Once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class Share extends ShareItem {

    private static final String CAN_NOT_SAVE_KEY = "SharePlot/properties/task/Share/dialog.CanNotSaveShare";
    private static final String CAN_NOT_DELETE_KEY = "SharePlot/properties/task/Share/dialog.CanNotDeleteShare";
    private static final String NOT_VALID_KEY = "SharePlot/properties/task/Share/dialog.ShareNotValid";

    private final ShareApplicationComponent shareAC;

    public Share(final ShareApplicationComponent shareAC) {
        super();
        this.shareAC = shareAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareAC.getSession()));
    }

    public Share(final Model model, final ShareApplicationComponent shareAC) {
        super(model);
        this.shareAC = shareAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareAC.getSession()));
    }

    public Share(final Share share) {
        super(share);
        this.shareAC = share.shareAC;
        setPojo2ErrorHandler(new SharePlotErrorHandler(this.shareAC.getSession()));
    }

    public boolean isValid() {
        // TODO add extra validations here
        return !isNotNullableNull();
    }

    private boolean isNew() {
        return getIdShare() == null;
    }

    public void save() throws FormatedJetException {
        if (isValid()) {
            final StoreNut storeNut = this.shareAC.getStoreNut(SelectStoreApplicationComponent.SHARE_STORE);
            try {
                ShareResource resource;
                if (isNew()) {
                    storeNut.createDataModel(get_Model());
                    resource = new ShareResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.CREATE);
                } else {
                    storeNut.updateDataModel(get_Model());
                    resource = new ShareResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.UPDATE);
                }
                final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareAC.getSession());
                resourceAC.notifyListeners(ShareResource.RESOURCE_NAME, resource);
            } catch (final FinderObjectNotFoundException e) {
                this.shareAC.logp(JETLevel.SEVERE, "Share", "save", e.getMessage(), e);
                final Object[] args = { getName() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            } catch (final JETException e) {
                this.shareAC.logp(JETLevel.SEVERE, "Share", "save", e.getMessage(), e);
                final Object[] args = { getName() };
                throw new FormatedJetException(null, CAN_NOT_SAVE_KEY, args, e);
            }
        } else {
            final Object[] args = { getName() };
            throw new FormatedJetException(null, NOT_VALID_KEY, args, null);
        }
    }

    public void delete() throws FormatedJetException {
        if (!isNew()) {
            final StoreNut storeNut = this.shareAC.getStoreNut(SelectStoreApplicationComponent.SHARE_STORE);
            try {
                final ShareResource resource = new ShareResource(this, AbstractResourceNotification.NOTIFICATION_TYPE.DELETE);
                storeNut.removeDataModel(get_Model());
                final ResourceNotificationApplicationComponent resourceAC = ResourceNotificationApplicationComponent.getInstance(this.shareAC.getSession());
                resourceAC.notifyListeners(ShareResource.RESOURCE_NAME, resource);
                storeNut.removeDataModel(get_Model());
            } catch (final FinderObjectNotFoundException e) {
                this.shareAC.logp(JETLevel.SEVERE, "Share", "delete", e.getMessage(), e);
                final Object[] args = { getName() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            } catch (final JETException e) {
                this.shareAC.logp(JETLevel.SEVERE, "Share", "delete", e.getMessage(), e);
                final Object[] args = { getName() };
                throw new FormatedJetException(null, CAN_NOT_DELETE_KEY, args, e);
            }
        }
    }

}
