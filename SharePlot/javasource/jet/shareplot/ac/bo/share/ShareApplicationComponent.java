package jet.shareplot.ac.bo.share;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jet.container.managers.application.interfaces.ApplicationProxy;
import jet.container.managers.session.interfaces.Session;
import jet.framework.component.SimpleApplicationComponent;
import jet.framework.manager.datamodel.interfaces.ModelArray;
import jet.framework.nuts.select.FinderMethod;
import jet.framework.nuts.select.SelectNut;
import jet.framework.nuts.select.SelectNutHelper;
import jet.framework.ui.desktop.AbstractDesktopNut;
import jet.lifecycle.annotations.Deinitializer;
import jet.lifecycle.interfaces.LifeCycleState;
import jet.shareplot.ac.SelectStoreApplicationComponent;
import jet.shareplot.ac.bo.portfolio.Portfolio;
import jet.shareplot.persistence.finder.share.Share_FindByPortfolio1;
import jet.util.SerializableKey;
import jet.util.logger.JETLevel;
import jet.util.models.interfaces.Model;
import jet.util.throwable.JETException;

/**
 * Share manipulation API
 * 
 * Generated by JetTools, you can edit this file directly, Once created it will not be overwritten
 * 
 * @author JetToolsFramework
 */
public class ShareApplicationComponent extends SimpleApplicationComponent {

    private static final long serialVersionUID = -1265738400L;
    /**
     * <code>NAME</code> of this application component, so it can be retrieved easily.
     */
    private final static String NAME = "ShareApplicationComponent";
    /**
     * <code>SESSION_KEY</code> session key
     */
    private final static Object SESSION_KEY = new SerializableKey(ShareApplicationComponent.class, "SESSION_KEY");

    /**
     * Get the instance of the ShareApplicationComponent linked to the session. If there
     * is not already one it will be created.
     * 
     * @param session
     * @return ShareApplicationComponent
     * @throws JETException
     */
    public static final ShareApplicationComponent getInstance(final Session session) throws JETException {
        ShareApplicationComponent shareAC = (ShareApplicationComponent) session.getProperty(SESSION_KEY);

        if (shareAC != null) {
            final LifeCycleState lcs = shareAC.getInitializableSupport().getLifeCycleState();
            if (lcs == LifeCycleState.UNINITIALIZED) {
                session.removeProperty(SESSION_KEY);
                shareAC = null;
            }
        }

        if (shareAC == null) {
            final AbstractDesktopNut desktopNut = (AbstractDesktopNut) session.getProperty(AbstractDesktopNut.SESSION_KEY_DESKTOP);
            if (desktopNut == null) {
                throw new JETException("Can only be used with an AbstractDesktopNut for the desktop.");
            }

            final ApplicationProxy appProxy = desktopNut.getApplicationProxy();
            if (appProxy.hasApplicationComponent(NAME)) {
                try {
                    final Map<String, Object> initMap = new HashMap<String, Object>();
                    shareAC = (ShareApplicationComponent) appProxy.createApplicationComponent(NAME, desktopNut.getApplicationComponent(), initMap);
                    desktopNut.registerChildApplicationComponent(shareAC);
                    session.setProperty(SESSION_KEY, shareAC);
                } catch (final JETException e) {
                    desktopNut.logp(JETLevel.SEVERE, NAME, "getInstance", e.getMessage(), e);
                    throw new JETException("Could not instantiate the ShareApplicationComponent.", e);
                }
            } else {
                desktopNut.logp(JETLevel.INFO, NAME, "getInstance", "NO APPLICATION COMPONENT FOUND FOR : " + NAME);
                throw new JETException("NO APPLICATION COMPONENT FOUND FOR : " + NAME);
            }
        }

        return shareAC;
    }

    /**
     * Deinit, internal use only
     * 
     * @throws JETException
     */
    @Deinitializer
    public final void doAccountACDeinit() throws JETException {
        getSession().removeProperty(SESSION_KEY);
    }

    /**
     * Return all share matching the FinderMethod.
     * 
     * @param finder FinderMethod to use to fetch the Shares
     * @return a list of share matching the FinderMethod.
     * @see List
     * @see Share
     */
    protected List<Share> getShares(final FinderMethod finder) {
        final List<Share> result = new ArrayList<Share>();

        final SelectNut selectNut = getSelectNut(SelectStoreApplicationComponent.SHARE_SELECT);
        final ModelArray ma = SelectNutHelper.getModelArray(selectNut, finder, getLogger());
        if (ma != null) {
            final int size = ma.getSize();
            for (int i = 0; i < size; i++) {
                final Model model = ma.get(i);
                final Share share = new Share(model, this);
                result.add(share);
            }
        }

        return result;
    }

    /**
     * Return the first share matching the FinderMethod.
     * 
     * @param finder FinderMethod to use to fetch the Share
     * @return the share matching the FinderMethod.
     * @see Share
     */
    protected Share getShare(final FinderMethod finder) {
        final Share result;

        final SelectNut selectNut = getSelectNut(SelectStoreApplicationComponent.SHARE_SELECT);
        final Model model = SelectNutHelper.getModel(selectNut, finder, getLogger());
        if (model != null) {
            result = new Share(model, this);
        } else {
            result = null;
        }

        return result;
    }

    /**
     * Get all shares for a given portfolio.
     * 
     * @param portfolio Portfolio for which the shares are desired
     * @return a list of shareQuantity matching the FinderMethod.
     * @see List
     * @see Portfolio
     * @see Share
     * @see #getShares(FinderMethod finder)
     */
    public List<Share> getShares(final Portfolio portfolio) {
        final Share_FindByPortfolio1 finder = new Share_FindByPortfolio1();
        finder.setIdPortfolio(portfolio.getIdPortfolio());

        return getShares(finder);
    }

}
