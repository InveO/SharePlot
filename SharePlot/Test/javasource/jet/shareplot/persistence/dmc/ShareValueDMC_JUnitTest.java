package jet.shareplot.persistence.dmc;

import static org.junit.Assert.assertFalse;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import jet.shareplot.persistence.ejb.sharevalue.ShareValueRemote;
import jet.shareplot.persistence.pojo.ShareValueItem;
import jet.util.models.interfaces.Model;

/**
 * ShareValue DataModelConverter2 JUnit test class
 *
 * Generated by JetTools, do not edit this file directly.
 */
public class ShareValueDMC_JUnitTest {

    @org.junit.Test
    public void testReadDataModelFromObject() throws Exception {
        // arrange : set up the test
        final ShareValueDMC dmc = new ShareValueDMC();
        final ShareValueRemote shareValueRemote = mock(ShareValueRemote.class);

        // if AI, ensure mock provides non null value
        when(shareValueRemote.getIdShareValue()).thenReturn(Long.valueOf(1));

        // act : run the test
        final Model shareValueModel = dmc.readDataModelFromObject(shareValueRemote);
        final ShareValueItem shareValueItem = new ShareValueItem(shareValueModel);

        // assert : verify that the test run correctly
        assertFalse(shareValueItem.isNew());
        assertFalse(shareValueItem.isDirty());

        // test that all data read from remote
        verify(shareValueRemote, times(1)).getIdShareValue();
        verify(shareValueRemote, times(1)).getIdShare();
        verify(shareValueRemote, times(1)).getValue();
        verify(shareValueRemote, times(1)).getValueDate();
    }

    @org.junit.Test
    public void testWriteDataModelToObject() throws Exception {
        // arrange : set up the test
        final ShareValueDMC dmc = new ShareValueDMC();
        final ShareValueRemote shareValueRemote = mock(ShareValueRemote.class);
        final ShareValueItem shareValueItem = new ShareValueItem();

        // act : run the test
        dmc.writeDataModelToObject(shareValueItem.get_Model(), shareValueRemote);

        // assert : verify that the test run correctly
        // check data written to all non pk fields
        verify(shareValueRemote, times(1)).setIdShare(any(Long.class));
        verify(shareValueRemote, times(1)).setValue(any(java.math.BigDecimal.class));
        verify(shareValueRemote, times(1)).setValueDate(any(java.util.Date.class));
    }

}
